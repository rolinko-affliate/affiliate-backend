/*
Everflow Network API - Advertisers

API for managing advertisers in the Everflow platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package advertiser

import (
	"encoding/json"
)

// checks if the Settings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Settings{}

// Settings struct for Settings
type Settings struct {
	ExposedVariables *SettingsExposedVariables `json:"exposed_variables,omitempty"`
}

// NewSettings instantiates a new Settings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettings() *Settings {
	this := Settings{}
	return &this
}

// NewSettingsWithDefaults instantiates a new Settings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsWithDefaults() *Settings {
	this := Settings{}
	return &this
}

// GetExposedVariables returns the ExposedVariables field value if set, zero value otherwise.
func (o *Settings) GetExposedVariables() SettingsExposedVariables {
	if o == nil || IsNil(o.ExposedVariables) {
		var ret SettingsExposedVariables
		return ret
	}
	return *o.ExposedVariables
}

// GetExposedVariablesOk returns a tuple with the ExposedVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetExposedVariablesOk() (*SettingsExposedVariables, bool) {
	if o == nil || IsNil(o.ExposedVariables) {
		return nil, false
	}
	return o.ExposedVariables, true
}

// HasExposedVariables returns a boolean if a field has been set.
func (o *Settings) HasExposedVariables() bool {
	if o != nil && !IsNil(o.ExposedVariables) {
		return true
	}

	return false
}

// SetExposedVariables gets a reference to the given SettingsExposedVariables and assigns it to the ExposedVariables field.
func (o *Settings) SetExposedVariables(v SettingsExposedVariables) {
	o.ExposedVariables = &v
}

func (o Settings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Settings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExposedVariables) {
		toSerialize["exposed_variables"] = o.ExposedVariables
	}
	return toSerialize, nil
}

type NullableSettings struct {
	value *Settings
	isSet bool
}

func (v NullableSettings) Get() *Settings {
	return v.value
}

func (v *NullableSettings) Set(val *Settings) {
	v.value = val
	v.isSet = true
}

func (v NullableSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettings(val *Settings) *NullableSettings {
	return &NullableSettings{value: val, isSet: true}
}

func (v NullableSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


