/*
Everflow Network API - Advertisers

API for managing advertisers in the Everflow platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package advertiser

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContactAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactAddress{}

// ContactAddress struct for ContactAddress
type ContactAddress struct {
	// The address first line
	Address1 string `json:"address_1"`
	// The address second line
	Address2 *string `json:"address_2,omitempty"`
	// The city name
	City string `json:"city"`
	// The region code
	RegionCode string `json:"region_code"`
	// The country code
	CountryCode string `json:"country_code"`
	// The country ID (numeric identifier)
	CountryId *int32 `json:"country_id,omitempty"`
	// The ZIP or Postal code
	ZipPostalCode string `json:"zip_postal_code"`
}

type _ContactAddress ContactAddress

// NewContactAddress instantiates a new ContactAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactAddress(address1 string, city string, regionCode string, countryCode string, zipPostalCode string) *ContactAddress {
	this := ContactAddress{}
	this.Address1 = address1
	this.City = city
	this.RegionCode = regionCode
	this.CountryCode = countryCode
	this.ZipPostalCode = zipPostalCode
	return &this
}

// NewContactAddressWithDefaults instantiates a new ContactAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactAddressWithDefaults() *ContactAddress {
	this := ContactAddress{}
	return &this
}

// GetAddress1 returns the Address1 field value
func (o *ContactAddress) GetAddress1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address1
}

// GetAddress1Ok returns a tuple with the Address1 field value
// and a boolean to check if the value has been set.
func (o *ContactAddress) GetAddress1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address1, true
}

// SetAddress1 sets field value
func (o *ContactAddress) SetAddress1(v string) {
	o.Address1 = v
}

// GetAddress2 returns the Address2 field value if set, zero value otherwise.
func (o *ContactAddress) GetAddress2() string {
	if o == nil || IsNil(o.Address2) {
		var ret string
		return ret
	}
	return *o.Address2
}

// GetAddress2Ok returns a tuple with the Address2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactAddress) GetAddress2Ok() (*string, bool) {
	if o == nil || IsNil(o.Address2) {
		return nil, false
	}
	return o.Address2, true
}

// HasAddress2 returns a boolean if a field has been set.
func (o *ContactAddress) HasAddress2() bool {
	if o != nil && !IsNil(o.Address2) {
		return true
	}

	return false
}

// SetAddress2 gets a reference to the given string and assigns it to the Address2 field.
func (o *ContactAddress) SetAddress2(v string) {
	o.Address2 = &v
}

// GetCity returns the City field value
func (o *ContactAddress) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *ContactAddress) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *ContactAddress) SetCity(v string) {
	o.City = v
}

// GetRegionCode returns the RegionCode field value
func (o *ContactAddress) GetRegionCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value
// and a boolean to check if the value has been set.
func (o *ContactAddress) GetRegionCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionCode, true
}

// SetRegionCode sets field value
func (o *ContactAddress) SetRegionCode(v string) {
	o.RegionCode = v
}

// GetCountryCode returns the CountryCode field value
func (o *ContactAddress) GetCountryCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value
// and a boolean to check if the value has been set.
func (o *ContactAddress) GetCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryCode, true
}

// SetCountryCode sets field value
func (o *ContactAddress) SetCountryCode(v string) {
	o.CountryCode = v
}

// GetCountryId returns the CountryId field value if set, zero value otherwise.
func (o *ContactAddress) GetCountryId() int32 {
	if o == nil || IsNil(o.CountryId) {
		var ret int32
		return ret
	}
	return *o.CountryId
}

// GetCountryIdOk returns a tuple with the CountryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactAddress) GetCountryIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CountryId) {
		return nil, false
	}
	return o.CountryId, true
}

// HasCountryId returns a boolean if a field has been set.
func (o *ContactAddress) HasCountryId() bool {
	if o != nil && !IsNil(o.CountryId) {
		return true
	}

	return false
}

// SetCountryId gets a reference to the given int32 and assigns it to the CountryId field.
func (o *ContactAddress) SetCountryId(v int32) {
	o.CountryId = &v
}

// GetZipPostalCode returns the ZipPostalCode field value
func (o *ContactAddress) GetZipPostalCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZipPostalCode
}

// GetZipPostalCodeOk returns a tuple with the ZipPostalCode field value
// and a boolean to check if the value has been set.
func (o *ContactAddress) GetZipPostalCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZipPostalCode, true
}

// SetZipPostalCode sets field value
func (o *ContactAddress) SetZipPostalCode(v string) {
	o.ZipPostalCode = v
}

func (o ContactAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address_1"] = o.Address1
	if !IsNil(o.Address2) {
		toSerialize["address_2"] = o.Address2
	}
	toSerialize["city"] = o.City
	toSerialize["region_code"] = o.RegionCode
	toSerialize["country_code"] = o.CountryCode
	if !IsNil(o.CountryId) {
		toSerialize["country_id"] = o.CountryId
	}
	toSerialize["zip_postal_code"] = o.ZipPostalCode
	return toSerialize, nil
}

func (o *ContactAddress) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address_1",
		"city",
		"region_code",
		"country_code",
		"zip_postal_code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContactAddress := _ContactAddress{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContactAddress)

	if err != nil {
		return err
	}

	*o = ContactAddress(varContactAddress)

	return err
}

type NullableContactAddress struct {
	value *ContactAddress
	isSet bool
}

func (v NullableContactAddress) Get() *ContactAddress {
	return v.value
}

func (v *NullableContactAddress) Set(val *ContactAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableContactAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableContactAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactAddress(val *ContactAddress) *NullableContactAddress {
	return &NullableContactAddress{value: val, isSet: true}
}

func (v NullableContactAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


