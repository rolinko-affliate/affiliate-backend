/*
Everflow Network API - Offers

API for managing offers in the Everflow platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package offer

import (
	"encoding/json"
)

// checks if the ThumbnailFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThumbnailFile{}

// ThumbnailFile struct for ThumbnailFile
type ThumbnailFile struct {
	// Temporary file URL
	TempUrl *string `json:"temp_url,omitempty"`
	// Original filename
	OriginalFileName *string `json:"original_file_name,omitempty"`
}

// NewThumbnailFile instantiates a new ThumbnailFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThumbnailFile() *ThumbnailFile {
	this := ThumbnailFile{}
	return &this
}

// NewThumbnailFileWithDefaults instantiates a new ThumbnailFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThumbnailFileWithDefaults() *ThumbnailFile {
	this := ThumbnailFile{}
	return &this
}

// GetTempUrl returns the TempUrl field value if set, zero value otherwise.
func (o *ThumbnailFile) GetTempUrl() string {
	if o == nil || IsNil(o.TempUrl) {
		var ret string
		return ret
	}
	return *o.TempUrl
}

// GetTempUrlOk returns a tuple with the TempUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThumbnailFile) GetTempUrlOk() (*string, bool) {
	if o == nil || IsNil(o.TempUrl) {
		return nil, false
	}
	return o.TempUrl, true
}

// HasTempUrl returns a boolean if a field has been set.
func (o *ThumbnailFile) HasTempUrl() bool {
	if o != nil && !IsNil(o.TempUrl) {
		return true
	}

	return false
}

// SetTempUrl gets a reference to the given string and assigns it to the TempUrl field.
func (o *ThumbnailFile) SetTempUrl(v string) {
	o.TempUrl = &v
}

// GetOriginalFileName returns the OriginalFileName field value if set, zero value otherwise.
func (o *ThumbnailFile) GetOriginalFileName() string {
	if o == nil || IsNil(o.OriginalFileName) {
		var ret string
		return ret
	}
	return *o.OriginalFileName
}

// GetOriginalFileNameOk returns a tuple with the OriginalFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThumbnailFile) GetOriginalFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalFileName) {
		return nil, false
	}
	return o.OriginalFileName, true
}

// HasOriginalFileName returns a boolean if a field has been set.
func (o *ThumbnailFile) HasOriginalFileName() bool {
	if o != nil && !IsNil(o.OriginalFileName) {
		return true
	}

	return false
}

// SetOriginalFileName gets a reference to the given string and assigns it to the OriginalFileName field.
func (o *ThumbnailFile) SetOriginalFileName(v string) {
	o.OriginalFileName = &v
}

func (o ThumbnailFile) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThumbnailFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TempUrl) {
		toSerialize["temp_url"] = o.TempUrl
	}
	if !IsNil(o.OriginalFileName) {
		toSerialize["original_file_name"] = o.OriginalFileName
	}
	return toSerialize, nil
}

type NullableThumbnailFile struct {
	value *ThumbnailFile
	isSet bool
}

func (v NullableThumbnailFile) Get() *ThumbnailFile {
	return v.value
}

func (v *NullableThumbnailFile) Set(val *ThumbnailFile) {
	v.value = val
	v.isSet = true
}

func (v NullableThumbnailFile) IsSet() bool {
	return v.isSet
}

func (v *NullableThumbnailFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThumbnailFile(val *ThumbnailFile) *NullableThumbnailFile {
	return &NullableThumbnailFile{value: val, isSet: true}
}

func (v NullableThumbnailFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThumbnailFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
