/*
Everflow Network API - Offers

API for managing offers in the Everflow platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package offer

import (
	"encoding/json"
)

// checks if the EmailSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailSettings{}

// EmailSettings struct for EmailSettings
type EmailSettings struct {
	// Email settings enabled
	IsEnabled *bool `json:"is_enabled,omitempty"`
	// Approved subject lines
	SubjectLines *string `json:"subject_lines,omitempty"`
	// Approved from lines
	FromLines *string `json:"from_lines,omitempty"`
}

// NewEmailSettings instantiates a new EmailSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailSettings() *EmailSettings {
	this := EmailSettings{}
	return &this
}

// NewEmailSettingsWithDefaults instantiates a new EmailSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailSettingsWithDefaults() *EmailSettings {
	this := EmailSettings{}
	return &this
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *EmailSettings) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSettings) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *EmailSettings) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *EmailSettings) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetSubjectLines returns the SubjectLines field value if set, zero value otherwise.
func (o *EmailSettings) GetSubjectLines() string {
	if o == nil || IsNil(o.SubjectLines) {
		var ret string
		return ret
	}
	return *o.SubjectLines
}

// GetSubjectLinesOk returns a tuple with the SubjectLines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSettings) GetSubjectLinesOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectLines) {
		return nil, false
	}
	return o.SubjectLines, true
}

// HasSubjectLines returns a boolean if a field has been set.
func (o *EmailSettings) HasSubjectLines() bool {
	if o != nil && !IsNil(o.SubjectLines) {
		return true
	}

	return false
}

// SetSubjectLines gets a reference to the given string and assigns it to the SubjectLines field.
func (o *EmailSettings) SetSubjectLines(v string) {
	o.SubjectLines = &v
}

// GetFromLines returns the FromLines field value if set, zero value otherwise.
func (o *EmailSettings) GetFromLines() string {
	if o == nil || IsNil(o.FromLines) {
		var ret string
		return ret
	}
	return *o.FromLines
}

// GetFromLinesOk returns a tuple with the FromLines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSettings) GetFromLinesOk() (*string, bool) {
	if o == nil || IsNil(o.FromLines) {
		return nil, false
	}
	return o.FromLines, true
}

// HasFromLines returns a boolean if a field has been set.
func (o *EmailSettings) HasFromLines() bool {
	if o != nil && !IsNil(o.FromLines) {
		return true
	}

	return false
}

// SetFromLines gets a reference to the given string and assigns it to the FromLines field.
func (o *EmailSettings) SetFromLines(v string) {
	o.FromLines = &v
}

func (o EmailSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsEnabled) {
		toSerialize["is_enabled"] = o.IsEnabled
	}
	if !IsNil(o.SubjectLines) {
		toSerialize["subject_lines"] = o.SubjectLines
	}
	if !IsNil(o.FromLines) {
		toSerialize["from_lines"] = o.FromLines
	}
	return toSerialize, nil
}

type NullableEmailSettings struct {
	value *EmailSettings
	isSet bool
}

func (v NullableEmailSettings) Get() *EmailSettings {
	return v.value
}

func (v *NullableEmailSettings) Set(val *EmailSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailSettings(val *EmailSettings) *NullableEmailSettings {
	return &NullableEmailSettings{value: val, isSet: true}
}

func (v NullableEmailSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
