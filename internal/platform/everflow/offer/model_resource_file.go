/*
Everflow Network API - Offers

API for managing offers in the Everflow platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package offer

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ResourceFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceFile{}

// ResourceFile struct for ResourceFile
type ResourceFile struct {
	// Temporary URL from file upload
	TempUrl string `json:"temp_url"`
	// Original filename
	OriginalFileName string `json:"original_file_name"`
}

type _ResourceFile ResourceFile

// NewResourceFile instantiates a new ResourceFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceFile(tempUrl string, originalFileName string) *ResourceFile {
	this := ResourceFile{}
	this.TempUrl = tempUrl
	this.OriginalFileName = originalFileName
	return &this
}

// NewResourceFileWithDefaults instantiates a new ResourceFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceFileWithDefaults() *ResourceFile {
	this := ResourceFile{}
	return &this
}

// GetTempUrl returns the TempUrl field value
func (o *ResourceFile) GetTempUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TempUrl
}

// GetTempUrlOk returns a tuple with the TempUrl field value
// and a boolean to check if the value has been set.
func (o *ResourceFile) GetTempUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TempUrl, true
}

// SetTempUrl sets field value
func (o *ResourceFile) SetTempUrl(v string) {
	o.TempUrl = v
}

// GetOriginalFileName returns the OriginalFileName field value
func (o *ResourceFile) GetOriginalFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalFileName
}

// GetOriginalFileNameOk returns a tuple with the OriginalFileName field value
// and a boolean to check if the value has been set.
func (o *ResourceFile) GetOriginalFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalFileName, true
}

// SetOriginalFileName sets field value
func (o *ResourceFile) SetOriginalFileName(v string) {
	o.OriginalFileName = v
}

func (o ResourceFile) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["temp_url"] = o.TempUrl
	toSerialize["original_file_name"] = o.OriginalFileName
	return toSerialize, nil
}

func (o *ResourceFile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"temp_url",
		"original_file_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceFile := _ResourceFile{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceFile)

	if err != nil {
		return err
	}

	*o = ResourceFile(varResourceFile)

	return err
}

type NullableResourceFile struct {
	value *ResourceFile
	isSet bool
}

func (v NullableResourceFile) Get() *ResourceFile {
	return v.value
}

func (v *NullableResourceFile) Set(val *ResourceFile) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceFile) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceFile(val *ResourceFile) *NullableResourceFile {
	return &NullableResourceFile{value: val, isSet: true}
}

func (v NullableResourceFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
