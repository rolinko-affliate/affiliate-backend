/*
Everflow Network API - Offers

API for managing offers in the Everflow platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package offer

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PayoutRevenue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PayoutRevenue{}

// PayoutRevenue struct for PayoutRevenue
type PayoutRevenue struct {
	// Event name
	EntryName *string `json:"entry_name,omitempty"`
	// Payout type
	PayoutType string `json:"payout_type"`
	// Payout amount
	PayoutAmount *float64 `json:"payout_amount,omitempty"`
	// Payout percentage
	PayoutPercentage *int32 `json:"payout_percentage,omitempty"`
	// Revenue type
	RevenueType string `json:"revenue_type"`
	// Revenue amount
	RevenueAmount *float64 `json:"revenue_amount,omitempty"`
	// Revenue percentage
	RevenuePercentage *int32 `json:"revenue_percentage,omitempty"`
	// Is base conversion
	IsDefault bool `json:"is_default"`
	// Is private event
	IsPrivate bool `json:"is_private"`
	// Disable partner postback
	IsPostbackDisabled *bool `json:"is_postback_disabled,omitempty"`
	// Global advertiser event ID
	GlobalAdvertiserEventId *int32 `json:"global_advertiser_event_id,omitempty"`
	// Require conversion approval
	IsMustApproveConversion *bool `json:"is_must_approve_conversion,omitempty"`
	// Allow duplicate conversions
	IsAllowDuplicateConversion *bool `json:"is_allow_duplicate_conversion,omitempty"`
}

type _PayoutRevenue PayoutRevenue

// NewPayoutRevenue instantiates a new PayoutRevenue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayoutRevenue(payoutType string, revenueType string, isDefault bool, isPrivate bool) *PayoutRevenue {
	this := PayoutRevenue{}
	var entryName string = "Base"
	this.EntryName = &entryName
	this.PayoutType = payoutType
	this.RevenueType = revenueType
	this.IsDefault = isDefault
	this.IsPrivate = isPrivate
	var isPostbackDisabled bool = false
	this.IsPostbackDisabled = &isPostbackDisabled
	var globalAdvertiserEventId int32 = 0
	this.GlobalAdvertiserEventId = &globalAdvertiserEventId
	var isMustApproveConversion bool = false
	this.IsMustApproveConversion = &isMustApproveConversion
	var isAllowDuplicateConversion bool = true
	this.IsAllowDuplicateConversion = &isAllowDuplicateConversion
	return &this
}

// NewPayoutRevenueWithDefaults instantiates a new PayoutRevenue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayoutRevenueWithDefaults() *PayoutRevenue {
	this := PayoutRevenue{}
	var entryName string = "Base"
	this.EntryName = &entryName
	var isPostbackDisabled bool = false
	this.IsPostbackDisabled = &isPostbackDisabled
	var globalAdvertiserEventId int32 = 0
	this.GlobalAdvertiserEventId = &globalAdvertiserEventId
	var isMustApproveConversion bool = false
	this.IsMustApproveConversion = &isMustApproveConversion
	var isAllowDuplicateConversion bool = true
	this.IsAllowDuplicateConversion = &isAllowDuplicateConversion
	return &this
}

// GetEntryName returns the EntryName field value if set, zero value otherwise.
func (o *PayoutRevenue) GetEntryName() string {
	if o == nil || IsNil(o.EntryName) {
		var ret string
		return ret
	}
	return *o.EntryName
}

// GetEntryNameOk returns a tuple with the EntryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutRevenue) GetEntryNameOk() (*string, bool) {
	if o == nil || IsNil(o.EntryName) {
		return nil, false
	}
	return o.EntryName, true
}

// HasEntryName returns a boolean if a field has been set.
func (o *PayoutRevenue) HasEntryName() bool {
	if o != nil && !IsNil(o.EntryName) {
		return true
	}

	return false
}

// SetEntryName gets a reference to the given string and assigns it to the EntryName field.
func (o *PayoutRevenue) SetEntryName(v string) {
	o.EntryName = &v
}

// GetPayoutType returns the PayoutType field value
func (o *PayoutRevenue) GetPayoutType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PayoutType
}

// GetPayoutTypeOk returns a tuple with the PayoutType field value
// and a boolean to check if the value has been set.
func (o *PayoutRevenue) GetPayoutTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayoutType, true
}

// SetPayoutType sets field value
func (o *PayoutRevenue) SetPayoutType(v string) {
	o.PayoutType = v
}

// GetPayoutAmount returns the PayoutAmount field value if set, zero value otherwise.
func (o *PayoutRevenue) GetPayoutAmount() float64 {
	if o == nil || IsNil(o.PayoutAmount) {
		var ret float64
		return ret
	}
	return *o.PayoutAmount
}

// GetPayoutAmountOk returns a tuple with the PayoutAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutRevenue) GetPayoutAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.PayoutAmount) {
		return nil, false
	}
	return o.PayoutAmount, true
}

// HasPayoutAmount returns a boolean if a field has been set.
func (o *PayoutRevenue) HasPayoutAmount() bool {
	if o != nil && !IsNil(o.PayoutAmount) {
		return true
	}

	return false
}

// SetPayoutAmount gets a reference to the given float64 and assigns it to the PayoutAmount field.
func (o *PayoutRevenue) SetPayoutAmount(v float64) {
	o.PayoutAmount = &v
}

// GetPayoutPercentage returns the PayoutPercentage field value if set, zero value otherwise.
func (o *PayoutRevenue) GetPayoutPercentage() int32 {
	if o == nil || IsNil(o.PayoutPercentage) {
		var ret int32
		return ret
	}
	return *o.PayoutPercentage
}

// GetPayoutPercentageOk returns a tuple with the PayoutPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutRevenue) GetPayoutPercentageOk() (*int32, bool) {
	if o == nil || IsNil(o.PayoutPercentage) {
		return nil, false
	}
	return o.PayoutPercentage, true
}

// HasPayoutPercentage returns a boolean if a field has been set.
func (o *PayoutRevenue) HasPayoutPercentage() bool {
	if o != nil && !IsNil(o.PayoutPercentage) {
		return true
	}

	return false
}

// SetPayoutPercentage gets a reference to the given int32 and assigns it to the PayoutPercentage field.
func (o *PayoutRevenue) SetPayoutPercentage(v int32) {
	o.PayoutPercentage = &v
}

// GetRevenueType returns the RevenueType field value
func (o *PayoutRevenue) GetRevenueType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevenueType
}

// GetRevenueTypeOk returns a tuple with the RevenueType field value
// and a boolean to check if the value has been set.
func (o *PayoutRevenue) GetRevenueTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevenueType, true
}

// SetRevenueType sets field value
func (o *PayoutRevenue) SetRevenueType(v string) {
	o.RevenueType = v
}

// GetRevenueAmount returns the RevenueAmount field value if set, zero value otherwise.
func (o *PayoutRevenue) GetRevenueAmount() float64 {
	if o == nil || IsNil(o.RevenueAmount) {
		var ret float64
		return ret
	}
	return *o.RevenueAmount
}

// GetRevenueAmountOk returns a tuple with the RevenueAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutRevenue) GetRevenueAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.RevenueAmount) {
		return nil, false
	}
	return o.RevenueAmount, true
}

// HasRevenueAmount returns a boolean if a field has been set.
func (o *PayoutRevenue) HasRevenueAmount() bool {
	if o != nil && !IsNil(o.RevenueAmount) {
		return true
	}

	return false
}

// SetRevenueAmount gets a reference to the given float64 and assigns it to the RevenueAmount field.
func (o *PayoutRevenue) SetRevenueAmount(v float64) {
	o.RevenueAmount = &v
}

// GetRevenuePercentage returns the RevenuePercentage field value if set, zero value otherwise.
func (o *PayoutRevenue) GetRevenuePercentage() int32 {
	if o == nil || IsNil(o.RevenuePercentage) {
		var ret int32
		return ret
	}
	return *o.RevenuePercentage
}

// GetRevenuePercentageOk returns a tuple with the RevenuePercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutRevenue) GetRevenuePercentageOk() (*int32, bool) {
	if o == nil || IsNil(o.RevenuePercentage) {
		return nil, false
	}
	return o.RevenuePercentage, true
}

// HasRevenuePercentage returns a boolean if a field has been set.
func (o *PayoutRevenue) HasRevenuePercentage() bool {
	if o != nil && !IsNil(o.RevenuePercentage) {
		return true
	}

	return false
}

// SetRevenuePercentage gets a reference to the given int32 and assigns it to the RevenuePercentage field.
func (o *PayoutRevenue) SetRevenuePercentage(v int32) {
	o.RevenuePercentage = &v
}

// GetIsDefault returns the IsDefault field value
func (o *PayoutRevenue) GetIsDefault() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value
// and a boolean to check if the value has been set.
func (o *PayoutRevenue) GetIsDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDefault, true
}

// SetIsDefault sets field value
func (o *PayoutRevenue) SetIsDefault(v bool) {
	o.IsDefault = v
}

// GetIsPrivate returns the IsPrivate field value
func (o *PayoutRevenue) GetIsPrivate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value
// and a boolean to check if the value has been set.
func (o *PayoutRevenue) GetIsPrivateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPrivate, true
}

// SetIsPrivate sets field value
func (o *PayoutRevenue) SetIsPrivate(v bool) {
	o.IsPrivate = v
}

// GetIsPostbackDisabled returns the IsPostbackDisabled field value if set, zero value otherwise.
func (o *PayoutRevenue) GetIsPostbackDisabled() bool {
	if o == nil || IsNil(o.IsPostbackDisabled) {
		var ret bool
		return ret
	}
	return *o.IsPostbackDisabled
}

// GetIsPostbackDisabledOk returns a tuple with the IsPostbackDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutRevenue) GetIsPostbackDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPostbackDisabled) {
		return nil, false
	}
	return o.IsPostbackDisabled, true
}

// HasIsPostbackDisabled returns a boolean if a field has been set.
func (o *PayoutRevenue) HasIsPostbackDisabled() bool {
	if o != nil && !IsNil(o.IsPostbackDisabled) {
		return true
	}

	return false
}

// SetIsPostbackDisabled gets a reference to the given bool and assigns it to the IsPostbackDisabled field.
func (o *PayoutRevenue) SetIsPostbackDisabled(v bool) {
	o.IsPostbackDisabled = &v
}

// GetGlobalAdvertiserEventId returns the GlobalAdvertiserEventId field value if set, zero value otherwise.
func (o *PayoutRevenue) GetGlobalAdvertiserEventId() int32 {
	if o == nil || IsNil(o.GlobalAdvertiserEventId) {
		var ret int32
		return ret
	}
	return *o.GlobalAdvertiserEventId
}

// GetGlobalAdvertiserEventIdOk returns a tuple with the GlobalAdvertiserEventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutRevenue) GetGlobalAdvertiserEventIdOk() (*int32, bool) {
	if o == nil || IsNil(o.GlobalAdvertiserEventId) {
		return nil, false
	}
	return o.GlobalAdvertiserEventId, true
}

// HasGlobalAdvertiserEventId returns a boolean if a field has been set.
func (o *PayoutRevenue) HasGlobalAdvertiserEventId() bool {
	if o != nil && !IsNil(o.GlobalAdvertiserEventId) {
		return true
	}

	return false
}

// SetGlobalAdvertiserEventId gets a reference to the given int32 and assigns it to the GlobalAdvertiserEventId field.
func (o *PayoutRevenue) SetGlobalAdvertiserEventId(v int32) {
	o.GlobalAdvertiserEventId = &v
}

// GetIsMustApproveConversion returns the IsMustApproveConversion field value if set, zero value otherwise.
func (o *PayoutRevenue) GetIsMustApproveConversion() bool {
	if o == nil || IsNil(o.IsMustApproveConversion) {
		var ret bool
		return ret
	}
	return *o.IsMustApproveConversion
}

// GetIsMustApproveConversionOk returns a tuple with the IsMustApproveConversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutRevenue) GetIsMustApproveConversionOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMustApproveConversion) {
		return nil, false
	}
	return o.IsMustApproveConversion, true
}

// HasIsMustApproveConversion returns a boolean if a field has been set.
func (o *PayoutRevenue) HasIsMustApproveConversion() bool {
	if o != nil && !IsNil(o.IsMustApproveConversion) {
		return true
	}

	return false
}

// SetIsMustApproveConversion gets a reference to the given bool and assigns it to the IsMustApproveConversion field.
func (o *PayoutRevenue) SetIsMustApproveConversion(v bool) {
	o.IsMustApproveConversion = &v
}

// GetIsAllowDuplicateConversion returns the IsAllowDuplicateConversion field value if set, zero value otherwise.
func (o *PayoutRevenue) GetIsAllowDuplicateConversion() bool {
	if o == nil || IsNil(o.IsAllowDuplicateConversion) {
		var ret bool
		return ret
	}
	return *o.IsAllowDuplicateConversion
}

// GetIsAllowDuplicateConversionOk returns a tuple with the IsAllowDuplicateConversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutRevenue) GetIsAllowDuplicateConversionOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAllowDuplicateConversion) {
		return nil, false
	}
	return o.IsAllowDuplicateConversion, true
}

// HasIsAllowDuplicateConversion returns a boolean if a field has been set.
func (o *PayoutRevenue) HasIsAllowDuplicateConversion() bool {
	if o != nil && !IsNil(o.IsAllowDuplicateConversion) {
		return true
	}

	return false
}

// SetIsAllowDuplicateConversion gets a reference to the given bool and assigns it to the IsAllowDuplicateConversion field.
func (o *PayoutRevenue) SetIsAllowDuplicateConversion(v bool) {
	o.IsAllowDuplicateConversion = &v
}

func (o PayoutRevenue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PayoutRevenue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryName) {
		toSerialize["entry_name"] = o.EntryName
	}
	toSerialize["payout_type"] = o.PayoutType
	if !IsNil(o.PayoutAmount) {
		toSerialize["payout_amount"] = o.PayoutAmount
	}
	if !IsNil(o.PayoutPercentage) {
		toSerialize["payout_percentage"] = o.PayoutPercentage
	}
	toSerialize["revenue_type"] = o.RevenueType
	if !IsNil(o.RevenueAmount) {
		toSerialize["revenue_amount"] = o.RevenueAmount
	}
	if !IsNil(o.RevenuePercentage) {
		toSerialize["revenue_percentage"] = o.RevenuePercentage
	}
	toSerialize["is_default"] = o.IsDefault
	toSerialize["is_private"] = o.IsPrivate
	if !IsNil(o.IsPostbackDisabled) {
		toSerialize["is_postback_disabled"] = o.IsPostbackDisabled
	}
	if !IsNil(o.GlobalAdvertiserEventId) {
		toSerialize["global_advertiser_event_id"] = o.GlobalAdvertiserEventId
	}
	if !IsNil(o.IsMustApproveConversion) {
		toSerialize["is_must_approve_conversion"] = o.IsMustApproveConversion
	}
	if !IsNil(o.IsAllowDuplicateConversion) {
		toSerialize["is_allow_duplicate_conversion"] = o.IsAllowDuplicateConversion
	}
	return toSerialize, nil
}

func (o *PayoutRevenue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"payout_type",
		"revenue_type",
		"is_default",
		"is_private",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPayoutRevenue := _PayoutRevenue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPayoutRevenue)

	if err != nil {
		return err
	}

	*o = PayoutRevenue(varPayoutRevenue)

	return err
}

type NullablePayoutRevenue struct {
	value *PayoutRevenue
	isSet bool
}

func (v NullablePayoutRevenue) Get() *PayoutRevenue {
	return v.value
}

func (v *NullablePayoutRevenue) Set(val *PayoutRevenue) {
	v.value = val
	v.isSet = true
}

func (v NullablePayoutRevenue) IsSet() bool {
	return v.isSet
}

func (v *NullablePayoutRevenue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayoutRevenue(val *PayoutRevenue) *NullablePayoutRevenue {
	return &NullablePayoutRevenue{value: val, isSet: true}
}

func (v NullablePayoutRevenue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayoutRevenue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
