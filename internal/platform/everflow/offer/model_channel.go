/*
Everflow Network API - Offers

API for managing offers in the Everflow platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package offer

import (
	"encoding/json"
)

// checks if the Channel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Channel{}

// Channel struct for Channel
type Channel struct {
	// Channel ID
	NetworkChannelId *int32 `json:"network_channel_id,omitempty"`
}

// NewChannel instantiates a new Channel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannel() *Channel {
	this := Channel{}
	return &this
}

// NewChannelWithDefaults instantiates a new Channel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelWithDefaults() *Channel {
	this := Channel{}
	return &this
}

// GetNetworkChannelId returns the NetworkChannelId field value if set, zero value otherwise.
func (o *Channel) GetNetworkChannelId() int32 {
	if o == nil || IsNil(o.NetworkChannelId) {
		var ret int32
		return ret
	}
	return *o.NetworkChannelId
}

// GetNetworkChannelIdOk returns a tuple with the NetworkChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Channel) GetNetworkChannelIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkChannelId) {
		return nil, false
	}
	return o.NetworkChannelId, true
}

// HasNetworkChannelId returns a boolean if a field has been set.
func (o *Channel) HasNetworkChannelId() bool {
	if o != nil && !IsNil(o.NetworkChannelId) {
		return true
	}

	return false
}

// SetNetworkChannelId gets a reference to the given int32 and assigns it to the NetworkChannelId field.
func (o *Channel) SetNetworkChannelId(v int32) {
	o.NetworkChannelId = &v
}

func (o Channel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Channel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NetworkChannelId) {
		toSerialize["network_channel_id"] = o.NetworkChannelId
	}
	return toSerialize, nil
}

type NullableChannel struct {
	value *Channel
	isSet bool
}

func (v NullableChannel) Get() *Channel {
	return v.value
}

func (v *NullableChannel) Set(val *Channel) {
	v.value = val
	v.isSet = true
}

func (v NullableChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannel(val *Channel) *NullableChannel {
	return &NullableChannel{value: val, isSet: true}
}

func (v NullableChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
