/*
Everflow Network API - Offers

API for managing offers in the Everflow platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package offer

import (
	"encoding/json"
)

// checks if the Integrations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Integrations{}

// Integrations struct for Integrations
type Integrations struct {
	Optizmo *IntegrationsOptizmo `json:"optizmo,omitempty"`
	TwentyfourMetrics *IntegrationsTwentyfourMetrics `json:"twentyfour_metrics,omitempty"`
	Forensiq *IntegrationsForensiq `json:"forensiq,omitempty"`
	Ezepo *IntegrationsEzepo `json:"ezepo,omitempty"`
	Anura *IntegrationsAnura `json:"anura,omitempty"`
	Invoca *IntegrationsInvoca `json:"invoca,omitempty"`
}

// NewIntegrations instantiates a new Integrations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrations() *Integrations {
	this := Integrations{}
	return &this
}

// NewIntegrationsWithDefaults instantiates a new Integrations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationsWithDefaults() *Integrations {
	this := Integrations{}
	return &this
}

// GetOptizmo returns the Optizmo field value if set, zero value otherwise.
func (o *Integrations) GetOptizmo() IntegrationsOptizmo {
	if o == nil || IsNil(o.Optizmo) {
		var ret IntegrationsOptizmo
		return ret
	}
	return *o.Optizmo
}

// GetOptizmoOk returns a tuple with the Optizmo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Integrations) GetOptizmoOk() (*IntegrationsOptizmo, bool) {
	if o == nil || IsNil(o.Optizmo) {
		return nil, false
	}
	return o.Optizmo, true
}

// HasOptizmo returns a boolean if a field has been set.
func (o *Integrations) HasOptizmo() bool {
	if o != nil && !IsNil(o.Optizmo) {
		return true
	}

	return false
}

// SetOptizmo gets a reference to the given IntegrationsOptizmo and assigns it to the Optizmo field.
func (o *Integrations) SetOptizmo(v IntegrationsOptizmo) {
	o.Optizmo = &v
}

// GetTwentyfourMetrics returns the TwentyfourMetrics field value if set, zero value otherwise.
func (o *Integrations) GetTwentyfourMetrics() IntegrationsTwentyfourMetrics {
	if o == nil || IsNil(o.TwentyfourMetrics) {
		var ret IntegrationsTwentyfourMetrics
		return ret
	}
	return *o.TwentyfourMetrics
}

// GetTwentyfourMetricsOk returns a tuple with the TwentyfourMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Integrations) GetTwentyfourMetricsOk() (*IntegrationsTwentyfourMetrics, bool) {
	if o == nil || IsNil(o.TwentyfourMetrics) {
		return nil, false
	}
	return o.TwentyfourMetrics, true
}

// HasTwentyfourMetrics returns a boolean if a field has been set.
func (o *Integrations) HasTwentyfourMetrics() bool {
	if o != nil && !IsNil(o.TwentyfourMetrics) {
		return true
	}

	return false
}

// SetTwentyfourMetrics gets a reference to the given IntegrationsTwentyfourMetrics and assigns it to the TwentyfourMetrics field.
func (o *Integrations) SetTwentyfourMetrics(v IntegrationsTwentyfourMetrics) {
	o.TwentyfourMetrics = &v
}

// GetForensiq returns the Forensiq field value if set, zero value otherwise.
func (o *Integrations) GetForensiq() IntegrationsForensiq {
	if o == nil || IsNil(o.Forensiq) {
		var ret IntegrationsForensiq
		return ret
	}
	return *o.Forensiq
}

// GetForensiqOk returns a tuple with the Forensiq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Integrations) GetForensiqOk() (*IntegrationsForensiq, bool) {
	if o == nil || IsNil(o.Forensiq) {
		return nil, false
	}
	return o.Forensiq, true
}

// HasForensiq returns a boolean if a field has been set.
func (o *Integrations) HasForensiq() bool {
	if o != nil && !IsNil(o.Forensiq) {
		return true
	}

	return false
}

// SetForensiq gets a reference to the given IntegrationsForensiq and assigns it to the Forensiq field.
func (o *Integrations) SetForensiq(v IntegrationsForensiq) {
	o.Forensiq = &v
}

// GetEzepo returns the Ezepo field value if set, zero value otherwise.
func (o *Integrations) GetEzepo() IntegrationsEzepo {
	if o == nil || IsNil(o.Ezepo) {
		var ret IntegrationsEzepo
		return ret
	}
	return *o.Ezepo
}

// GetEzepoOk returns a tuple with the Ezepo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Integrations) GetEzepoOk() (*IntegrationsEzepo, bool) {
	if o == nil || IsNil(o.Ezepo) {
		return nil, false
	}
	return o.Ezepo, true
}

// HasEzepo returns a boolean if a field has been set.
func (o *Integrations) HasEzepo() bool {
	if o != nil && !IsNil(o.Ezepo) {
		return true
	}

	return false
}

// SetEzepo gets a reference to the given IntegrationsEzepo and assigns it to the Ezepo field.
func (o *Integrations) SetEzepo(v IntegrationsEzepo) {
	o.Ezepo = &v
}

// GetAnura returns the Anura field value if set, zero value otherwise.
func (o *Integrations) GetAnura() IntegrationsAnura {
	if o == nil || IsNil(o.Anura) {
		var ret IntegrationsAnura
		return ret
	}
	return *o.Anura
}

// GetAnuraOk returns a tuple with the Anura field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Integrations) GetAnuraOk() (*IntegrationsAnura, bool) {
	if o == nil || IsNil(o.Anura) {
		return nil, false
	}
	return o.Anura, true
}

// HasAnura returns a boolean if a field has been set.
func (o *Integrations) HasAnura() bool {
	if o != nil && !IsNil(o.Anura) {
		return true
	}

	return false
}

// SetAnura gets a reference to the given IntegrationsAnura and assigns it to the Anura field.
func (o *Integrations) SetAnura(v IntegrationsAnura) {
	o.Anura = &v
}

// GetInvoca returns the Invoca field value if set, zero value otherwise.
func (o *Integrations) GetInvoca() IntegrationsInvoca {
	if o == nil || IsNil(o.Invoca) {
		var ret IntegrationsInvoca
		return ret
	}
	return *o.Invoca
}

// GetInvocaOk returns a tuple with the Invoca field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Integrations) GetInvocaOk() (*IntegrationsInvoca, bool) {
	if o == nil || IsNil(o.Invoca) {
		return nil, false
	}
	return o.Invoca, true
}

// HasInvoca returns a boolean if a field has been set.
func (o *Integrations) HasInvoca() bool {
	if o != nil && !IsNil(o.Invoca) {
		return true
	}

	return false
}

// SetInvoca gets a reference to the given IntegrationsInvoca and assigns it to the Invoca field.
func (o *Integrations) SetInvoca(v IntegrationsInvoca) {
	o.Invoca = &v
}

func (o Integrations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Integrations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Optizmo) {
		toSerialize["optizmo"] = o.Optizmo
	}
	if !IsNil(o.TwentyfourMetrics) {
		toSerialize["twentyfour_metrics"] = o.TwentyfourMetrics
	}
	if !IsNil(o.Forensiq) {
		toSerialize["forensiq"] = o.Forensiq
	}
	if !IsNil(o.Ezepo) {
		toSerialize["ezepo"] = o.Ezepo
	}
	if !IsNil(o.Anura) {
		toSerialize["anura"] = o.Anura
	}
	if !IsNil(o.Invoca) {
		toSerialize["invoca"] = o.Invoca
	}
	return toSerialize, nil
}

type NullableIntegrations struct {
	value *Integrations
	isSet bool
}

func (v NullableIntegrations) Get() *Integrations {
	return v.value
}

func (v *NullableIntegrations) Set(val *Integrations) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrations) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrations(val *Integrations) *NullableIntegrations {
	return &NullableIntegrations{value: val, isSet: true}
}

func (v NullableIntegrations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


