/*
Everflow Affiliates API

API for managing affiliates in the Everflow platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package affiliate

import (
	"encoding/json"
)

// checks if the ContactAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactAddress{}

// ContactAddress struct for ContactAddress
type ContactAddress struct {
	// The address first line
	Address1 *string `json:"address_1,omitempty"`
	// The address second line
	Address2 *string `json:"address_2,omitempty"`
	// The city name
	City *string `json:"city,omitempty"`
	// The region code
	RegionCode *string `json:"region_code,omitempty"`
	// The country code
	CountryCode *string `json:"country_code,omitempty"`
	// The ZIP or Postal code
	ZipPostalCode *string `json:"zip_postal_code,omitempty"`
}

// NewContactAddress instantiates a new ContactAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactAddress() *ContactAddress {
	this := ContactAddress{}
	return &this
}

// NewContactAddressWithDefaults instantiates a new ContactAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactAddressWithDefaults() *ContactAddress {
	this := ContactAddress{}
	return &this
}

// GetAddress1 returns the Address1 field value if set, zero value otherwise.
func (o *ContactAddress) GetAddress1() string {
	if o == nil || IsNil(o.Address1) {
		var ret string
		return ret
	}
	return *o.Address1
}

// GetAddress1Ok returns a tuple with the Address1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactAddress) GetAddress1Ok() (*string, bool) {
	if o == nil || IsNil(o.Address1) {
		return nil, false
	}
	return o.Address1, true
}

// HasAddress1 returns a boolean if a field has been set.
func (o *ContactAddress) HasAddress1() bool {
	if o != nil && !IsNil(o.Address1) {
		return true
	}

	return false
}

// SetAddress1 gets a reference to the given string and assigns it to the Address1 field.
func (o *ContactAddress) SetAddress1(v string) {
	o.Address1 = &v
}

// GetAddress2 returns the Address2 field value if set, zero value otherwise.
func (o *ContactAddress) GetAddress2() string {
	if o == nil || IsNil(o.Address2) {
		var ret string
		return ret
	}
	return *o.Address2
}

// GetAddress2Ok returns a tuple with the Address2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactAddress) GetAddress2Ok() (*string, bool) {
	if o == nil || IsNil(o.Address2) {
		return nil, false
	}
	return o.Address2, true
}

// HasAddress2 returns a boolean if a field has been set.
func (o *ContactAddress) HasAddress2() bool {
	if o != nil && !IsNil(o.Address2) {
		return true
	}

	return false
}

// SetAddress2 gets a reference to the given string and assigns it to the Address2 field.
func (o *ContactAddress) SetAddress2(v string) {
	o.Address2 = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *ContactAddress) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactAddress) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *ContactAddress) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *ContactAddress) SetCity(v string) {
	o.City = &v
}

// GetRegionCode returns the RegionCode field value if set, zero value otherwise.
func (o *ContactAddress) GetRegionCode() string {
	if o == nil || IsNil(o.RegionCode) {
		var ret string
		return ret
	}
	return *o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactAddress) GetRegionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RegionCode) {
		return nil, false
	}
	return o.RegionCode, true
}

// HasRegionCode returns a boolean if a field has been set.
func (o *ContactAddress) HasRegionCode() bool {
	if o != nil && !IsNil(o.RegionCode) {
		return true
	}

	return false
}

// SetRegionCode gets a reference to the given string and assigns it to the RegionCode field.
func (o *ContactAddress) SetRegionCode(v string) {
	o.RegionCode = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *ContactAddress) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactAddress) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *ContactAddress) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *ContactAddress) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetZipPostalCode returns the ZipPostalCode field value if set, zero value otherwise.
func (o *ContactAddress) GetZipPostalCode() string {
	if o == nil || IsNil(o.ZipPostalCode) {
		var ret string
		return ret
	}
	return *o.ZipPostalCode
}

// GetZipPostalCodeOk returns a tuple with the ZipPostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactAddress) GetZipPostalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ZipPostalCode) {
		return nil, false
	}
	return o.ZipPostalCode, true
}

// HasZipPostalCode returns a boolean if a field has been set.
func (o *ContactAddress) HasZipPostalCode() bool {
	if o != nil && !IsNil(o.ZipPostalCode) {
		return true
	}

	return false
}

// SetZipPostalCode gets a reference to the given string and assigns it to the ZipPostalCode field.
func (o *ContactAddress) SetZipPostalCode(v string) {
	o.ZipPostalCode = &v
}

func (o ContactAddress) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address1) {
		toSerialize["address_1"] = o.Address1
	}
	if !IsNil(o.Address2) {
		toSerialize["address_2"] = o.Address2
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.RegionCode) {
		toSerialize["region_code"] = o.RegionCode
	}
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	if !IsNil(o.ZipPostalCode) {
		toSerialize["zip_postal_code"] = o.ZipPostalCode
	}
	return toSerialize, nil
}

type NullableContactAddress struct {
	value *ContactAddress
	isSet bool
}

func (v NullableContactAddress) Get() *ContactAddress {
	return v.value
}

func (v *NullableContactAddress) Set(val *ContactAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableContactAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableContactAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactAddress(val *ContactAddress) *NullableContactAddress {
	return &NullableContactAddress{value: val, isSet: true}
}

func (v NullableContactAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
