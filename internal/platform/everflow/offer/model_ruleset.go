/*
Everflow Network API - Offers

API for managing offers in the Everflow platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package offer

import (
	"encoding/json"
)

// checks if the Ruleset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ruleset{}

// Ruleset Targeting rules for traffic
type Ruleset struct {
	Platforms []map[string]interface{} `json:"platforms,omitempty"`
	DeviceTypes []map[string]interface{} `json:"device_types,omitempty"`
	OsVersions []map[string]interface{} `json:"os_versions,omitempty"`
	Browsers []map[string]interface{} `json:"browsers,omitempty"`
	Languages []map[string]interface{} `json:"languages,omitempty"`
	Countries []map[string]interface{} `json:"countries,omitempty"`
	Regions []map[string]interface{} `json:"regions,omitempty"`
	Cities []map[string]interface{} `json:"cities,omitempty"`
	Dmas []map[string]interface{} `json:"dmas,omitempty"`
	MobileCarriers []map[string]interface{} `json:"mobile_carriers,omitempty"`
	ConnectionTypes []map[string]interface{} `json:"connection_types,omitempty"`
	Ips []map[string]interface{} `json:"ips,omitempty"`
	// Block proxy traffic
	IsBlockProxy *bool `json:"is_block_proxy,omitempty"`
	// Enable day parting
	IsUseDayParting *bool `json:"is_use_day_parting,omitempty"`
	// Day parting timezone setting
	DayPartingApplyTo *string `json:"day_parting_apply_to,omitempty"`
	// Timezone ID for day parting
	DayPartingTimezoneId *int32 `json:"day_parting_timezone_id,omitempty"`
	DaysParting []map[string]interface{} `json:"days_parting,omitempty"`
	Isps []map[string]interface{} `json:"isps,omitempty"`
	Brands []map[string]interface{} `json:"brands,omitempty"`
	PostalCodes []map[string]interface{} `json:"postal_codes,omitempty"`
}

// NewRuleset instantiates a new Ruleset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleset() *Ruleset {
	this := Ruleset{}
	var isBlockProxy bool = false
	this.IsBlockProxy = &isBlockProxy
	var isUseDayParting bool = false
	this.IsUseDayParting = &isUseDayParting
	return &this
}

// NewRulesetWithDefaults instantiates a new Ruleset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRulesetWithDefaults() *Ruleset {
	this := Ruleset{}
	var isBlockProxy bool = false
	this.IsBlockProxy = &isBlockProxy
	var isUseDayParting bool = false
	this.IsUseDayParting = &isUseDayParting
	return &this
}

// GetPlatforms returns the Platforms field value if set, zero value otherwise.
func (o *Ruleset) GetPlatforms() []map[string]interface{} {
	if o == nil || IsNil(o.Platforms) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Platforms
}

// GetPlatformsOk returns a tuple with the Platforms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetPlatformsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Platforms) {
		return nil, false
	}
	return o.Platforms, true
}

// HasPlatforms returns a boolean if a field has been set.
func (o *Ruleset) HasPlatforms() bool {
	if o != nil && !IsNil(o.Platforms) {
		return true
	}

	return false
}

// SetPlatforms gets a reference to the given []map[string]interface{} and assigns it to the Platforms field.
func (o *Ruleset) SetPlatforms(v []map[string]interface{}) {
	o.Platforms = v
}

// GetDeviceTypes returns the DeviceTypes field value if set, zero value otherwise.
func (o *Ruleset) GetDeviceTypes() []map[string]interface{} {
	if o == nil || IsNil(o.DeviceTypes) {
		var ret []map[string]interface{}
		return ret
	}
	return o.DeviceTypes
}

// GetDeviceTypesOk returns a tuple with the DeviceTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetDeviceTypesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.DeviceTypes) {
		return nil, false
	}
	return o.DeviceTypes, true
}

// HasDeviceTypes returns a boolean if a field has been set.
func (o *Ruleset) HasDeviceTypes() bool {
	if o != nil && !IsNil(o.DeviceTypes) {
		return true
	}

	return false
}

// SetDeviceTypes gets a reference to the given []map[string]interface{} and assigns it to the DeviceTypes field.
func (o *Ruleset) SetDeviceTypes(v []map[string]interface{}) {
	o.DeviceTypes = v
}

// GetOsVersions returns the OsVersions field value if set, zero value otherwise.
func (o *Ruleset) GetOsVersions() []map[string]interface{} {
	if o == nil || IsNil(o.OsVersions) {
		var ret []map[string]interface{}
		return ret
	}
	return o.OsVersions
}

// GetOsVersionsOk returns a tuple with the OsVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetOsVersionsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.OsVersions) {
		return nil, false
	}
	return o.OsVersions, true
}

// HasOsVersions returns a boolean if a field has been set.
func (o *Ruleset) HasOsVersions() bool {
	if o != nil && !IsNil(o.OsVersions) {
		return true
	}

	return false
}

// SetOsVersions gets a reference to the given []map[string]interface{} and assigns it to the OsVersions field.
func (o *Ruleset) SetOsVersions(v []map[string]interface{}) {
	o.OsVersions = v
}

// GetBrowsers returns the Browsers field value if set, zero value otherwise.
func (o *Ruleset) GetBrowsers() []map[string]interface{} {
	if o == nil || IsNil(o.Browsers) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Browsers
}

// GetBrowsersOk returns a tuple with the Browsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetBrowsersOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Browsers) {
		return nil, false
	}
	return o.Browsers, true
}

// HasBrowsers returns a boolean if a field has been set.
func (o *Ruleset) HasBrowsers() bool {
	if o != nil && !IsNil(o.Browsers) {
		return true
	}

	return false
}

// SetBrowsers gets a reference to the given []map[string]interface{} and assigns it to the Browsers field.
func (o *Ruleset) SetBrowsers(v []map[string]interface{}) {
	o.Browsers = v
}

// GetLanguages returns the Languages field value if set, zero value otherwise.
func (o *Ruleset) GetLanguages() []map[string]interface{} {
	if o == nil || IsNil(o.Languages) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Languages
}

// GetLanguagesOk returns a tuple with the Languages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetLanguagesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Languages) {
		return nil, false
	}
	return o.Languages, true
}

// HasLanguages returns a boolean if a field has been set.
func (o *Ruleset) HasLanguages() bool {
	if o != nil && !IsNil(o.Languages) {
		return true
	}

	return false
}

// SetLanguages gets a reference to the given []map[string]interface{} and assigns it to the Languages field.
func (o *Ruleset) SetLanguages(v []map[string]interface{}) {
	o.Languages = v
}

// GetCountries returns the Countries field value if set, zero value otherwise.
func (o *Ruleset) GetCountries() []map[string]interface{} {
	if o == nil || IsNil(o.Countries) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Countries
}

// GetCountriesOk returns a tuple with the Countries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetCountriesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Countries) {
		return nil, false
	}
	return o.Countries, true
}

// HasCountries returns a boolean if a field has been set.
func (o *Ruleset) HasCountries() bool {
	if o != nil && !IsNil(o.Countries) {
		return true
	}

	return false
}

// SetCountries gets a reference to the given []map[string]interface{} and assigns it to the Countries field.
func (o *Ruleset) SetCountries(v []map[string]interface{}) {
	o.Countries = v
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *Ruleset) GetRegions() []map[string]interface{} {
	if o == nil || IsNil(o.Regions) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetRegionsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Regions) {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *Ruleset) HasRegions() bool {
	if o != nil && !IsNil(o.Regions) {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []map[string]interface{} and assigns it to the Regions field.
func (o *Ruleset) SetRegions(v []map[string]interface{}) {
	o.Regions = v
}

// GetCities returns the Cities field value if set, zero value otherwise.
func (o *Ruleset) GetCities() []map[string]interface{} {
	if o == nil || IsNil(o.Cities) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Cities
}

// GetCitiesOk returns a tuple with the Cities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetCitiesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Cities) {
		return nil, false
	}
	return o.Cities, true
}

// HasCities returns a boolean if a field has been set.
func (o *Ruleset) HasCities() bool {
	if o != nil && !IsNil(o.Cities) {
		return true
	}

	return false
}

// SetCities gets a reference to the given []map[string]interface{} and assigns it to the Cities field.
func (o *Ruleset) SetCities(v []map[string]interface{}) {
	o.Cities = v
}

// GetDmas returns the Dmas field value if set, zero value otherwise.
func (o *Ruleset) GetDmas() []map[string]interface{} {
	if o == nil || IsNil(o.Dmas) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Dmas
}

// GetDmasOk returns a tuple with the Dmas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetDmasOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Dmas) {
		return nil, false
	}
	return o.Dmas, true
}

// HasDmas returns a boolean if a field has been set.
func (o *Ruleset) HasDmas() bool {
	if o != nil && !IsNil(o.Dmas) {
		return true
	}

	return false
}

// SetDmas gets a reference to the given []map[string]interface{} and assigns it to the Dmas field.
func (o *Ruleset) SetDmas(v []map[string]interface{}) {
	o.Dmas = v
}

// GetMobileCarriers returns the MobileCarriers field value if set, zero value otherwise.
func (o *Ruleset) GetMobileCarriers() []map[string]interface{} {
	if o == nil || IsNil(o.MobileCarriers) {
		var ret []map[string]interface{}
		return ret
	}
	return o.MobileCarriers
}

// GetMobileCarriersOk returns a tuple with the MobileCarriers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetMobileCarriersOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.MobileCarriers) {
		return nil, false
	}
	return o.MobileCarriers, true
}

// HasMobileCarriers returns a boolean if a field has been set.
func (o *Ruleset) HasMobileCarriers() bool {
	if o != nil && !IsNil(o.MobileCarriers) {
		return true
	}

	return false
}

// SetMobileCarriers gets a reference to the given []map[string]interface{} and assigns it to the MobileCarriers field.
func (o *Ruleset) SetMobileCarriers(v []map[string]interface{}) {
	o.MobileCarriers = v
}

// GetConnectionTypes returns the ConnectionTypes field value if set, zero value otherwise.
func (o *Ruleset) GetConnectionTypes() []map[string]interface{} {
	if o == nil || IsNil(o.ConnectionTypes) {
		var ret []map[string]interface{}
		return ret
	}
	return o.ConnectionTypes
}

// GetConnectionTypesOk returns a tuple with the ConnectionTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetConnectionTypesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.ConnectionTypes) {
		return nil, false
	}
	return o.ConnectionTypes, true
}

// HasConnectionTypes returns a boolean if a field has been set.
func (o *Ruleset) HasConnectionTypes() bool {
	if o != nil && !IsNil(o.ConnectionTypes) {
		return true
	}

	return false
}

// SetConnectionTypes gets a reference to the given []map[string]interface{} and assigns it to the ConnectionTypes field.
func (o *Ruleset) SetConnectionTypes(v []map[string]interface{}) {
	o.ConnectionTypes = v
}

// GetIps returns the Ips field value if set, zero value otherwise.
func (o *Ruleset) GetIps() []map[string]interface{} {
	if o == nil || IsNil(o.Ips) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Ips
}

// GetIpsOk returns a tuple with the Ips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetIpsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Ips) {
		return nil, false
	}
	return o.Ips, true
}

// HasIps returns a boolean if a field has been set.
func (o *Ruleset) HasIps() bool {
	if o != nil && !IsNil(o.Ips) {
		return true
	}

	return false
}

// SetIps gets a reference to the given []map[string]interface{} and assigns it to the Ips field.
func (o *Ruleset) SetIps(v []map[string]interface{}) {
	o.Ips = v
}

// GetIsBlockProxy returns the IsBlockProxy field value if set, zero value otherwise.
func (o *Ruleset) GetIsBlockProxy() bool {
	if o == nil || IsNil(o.IsBlockProxy) {
		var ret bool
		return ret
	}
	return *o.IsBlockProxy
}

// GetIsBlockProxyOk returns a tuple with the IsBlockProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetIsBlockProxyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBlockProxy) {
		return nil, false
	}
	return o.IsBlockProxy, true
}

// HasIsBlockProxy returns a boolean if a field has been set.
func (o *Ruleset) HasIsBlockProxy() bool {
	if o != nil && !IsNil(o.IsBlockProxy) {
		return true
	}

	return false
}

// SetIsBlockProxy gets a reference to the given bool and assigns it to the IsBlockProxy field.
func (o *Ruleset) SetIsBlockProxy(v bool) {
	o.IsBlockProxy = &v
}

// GetIsUseDayParting returns the IsUseDayParting field value if set, zero value otherwise.
func (o *Ruleset) GetIsUseDayParting() bool {
	if o == nil || IsNil(o.IsUseDayParting) {
		var ret bool
		return ret
	}
	return *o.IsUseDayParting
}

// GetIsUseDayPartingOk returns a tuple with the IsUseDayParting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetIsUseDayPartingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUseDayParting) {
		return nil, false
	}
	return o.IsUseDayParting, true
}

// HasIsUseDayParting returns a boolean if a field has been set.
func (o *Ruleset) HasIsUseDayParting() bool {
	if o != nil && !IsNil(o.IsUseDayParting) {
		return true
	}

	return false
}

// SetIsUseDayParting gets a reference to the given bool and assigns it to the IsUseDayParting field.
func (o *Ruleset) SetIsUseDayParting(v bool) {
	o.IsUseDayParting = &v
}

// GetDayPartingApplyTo returns the DayPartingApplyTo field value if set, zero value otherwise.
func (o *Ruleset) GetDayPartingApplyTo() string {
	if o == nil || IsNil(o.DayPartingApplyTo) {
		var ret string
		return ret
	}
	return *o.DayPartingApplyTo
}

// GetDayPartingApplyToOk returns a tuple with the DayPartingApplyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetDayPartingApplyToOk() (*string, bool) {
	if o == nil || IsNil(o.DayPartingApplyTo) {
		return nil, false
	}
	return o.DayPartingApplyTo, true
}

// HasDayPartingApplyTo returns a boolean if a field has been set.
func (o *Ruleset) HasDayPartingApplyTo() bool {
	if o != nil && !IsNil(o.DayPartingApplyTo) {
		return true
	}

	return false
}

// SetDayPartingApplyTo gets a reference to the given string and assigns it to the DayPartingApplyTo field.
func (o *Ruleset) SetDayPartingApplyTo(v string) {
	o.DayPartingApplyTo = &v
}

// GetDayPartingTimezoneId returns the DayPartingTimezoneId field value if set, zero value otherwise.
func (o *Ruleset) GetDayPartingTimezoneId() int32 {
	if o == nil || IsNil(o.DayPartingTimezoneId) {
		var ret int32
		return ret
	}
	return *o.DayPartingTimezoneId
}

// GetDayPartingTimezoneIdOk returns a tuple with the DayPartingTimezoneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetDayPartingTimezoneIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DayPartingTimezoneId) {
		return nil, false
	}
	return o.DayPartingTimezoneId, true
}

// HasDayPartingTimezoneId returns a boolean if a field has been set.
func (o *Ruleset) HasDayPartingTimezoneId() bool {
	if o != nil && !IsNil(o.DayPartingTimezoneId) {
		return true
	}

	return false
}

// SetDayPartingTimezoneId gets a reference to the given int32 and assigns it to the DayPartingTimezoneId field.
func (o *Ruleset) SetDayPartingTimezoneId(v int32) {
	o.DayPartingTimezoneId = &v
}

// GetDaysParting returns the DaysParting field value if set, zero value otherwise.
func (o *Ruleset) GetDaysParting() []map[string]interface{} {
	if o == nil || IsNil(o.DaysParting) {
		var ret []map[string]interface{}
		return ret
	}
	return o.DaysParting
}

// GetDaysPartingOk returns a tuple with the DaysParting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetDaysPartingOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.DaysParting) {
		return nil, false
	}
	return o.DaysParting, true
}

// HasDaysParting returns a boolean if a field has been set.
func (o *Ruleset) HasDaysParting() bool {
	if o != nil && !IsNil(o.DaysParting) {
		return true
	}

	return false
}

// SetDaysParting gets a reference to the given []map[string]interface{} and assigns it to the DaysParting field.
func (o *Ruleset) SetDaysParting(v []map[string]interface{}) {
	o.DaysParting = v
}

// GetIsps returns the Isps field value if set, zero value otherwise.
func (o *Ruleset) GetIsps() []map[string]interface{} {
	if o == nil || IsNil(o.Isps) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Isps
}

// GetIspsOk returns a tuple with the Isps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetIspsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Isps) {
		return nil, false
	}
	return o.Isps, true
}

// HasIsps returns a boolean if a field has been set.
func (o *Ruleset) HasIsps() bool {
	if o != nil && !IsNil(o.Isps) {
		return true
	}

	return false
}

// SetIsps gets a reference to the given []map[string]interface{} and assigns it to the Isps field.
func (o *Ruleset) SetIsps(v []map[string]interface{}) {
	o.Isps = v
}

// GetBrands returns the Brands field value if set, zero value otherwise.
func (o *Ruleset) GetBrands() []map[string]interface{} {
	if o == nil || IsNil(o.Brands) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Brands
}

// GetBrandsOk returns a tuple with the Brands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetBrandsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Brands) {
		return nil, false
	}
	return o.Brands, true
}

// HasBrands returns a boolean if a field has been set.
func (o *Ruleset) HasBrands() bool {
	if o != nil && !IsNil(o.Brands) {
		return true
	}

	return false
}

// SetBrands gets a reference to the given []map[string]interface{} and assigns it to the Brands field.
func (o *Ruleset) SetBrands(v []map[string]interface{}) {
	o.Brands = v
}

// GetPostalCodes returns the PostalCodes field value if set, zero value otherwise.
func (o *Ruleset) GetPostalCodes() []map[string]interface{} {
	if o == nil || IsNil(o.PostalCodes) {
		var ret []map[string]interface{}
		return ret
	}
	return o.PostalCodes
}

// GetPostalCodesOk returns a tuple with the PostalCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetPostalCodesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.PostalCodes) {
		return nil, false
	}
	return o.PostalCodes, true
}

// HasPostalCodes returns a boolean if a field has been set.
func (o *Ruleset) HasPostalCodes() bool {
	if o != nil && !IsNil(o.PostalCodes) {
		return true
	}

	return false
}

// SetPostalCodes gets a reference to the given []map[string]interface{} and assigns it to the PostalCodes field.
func (o *Ruleset) SetPostalCodes(v []map[string]interface{}) {
	o.PostalCodes = v
}

func (o Ruleset) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ruleset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Platforms) {
		toSerialize["platforms"] = o.Platforms
	}
	if !IsNil(o.DeviceTypes) {
		toSerialize["device_types"] = o.DeviceTypes
	}
	if !IsNil(o.OsVersions) {
		toSerialize["os_versions"] = o.OsVersions
	}
	if !IsNil(o.Browsers) {
		toSerialize["browsers"] = o.Browsers
	}
	if !IsNil(o.Languages) {
		toSerialize["languages"] = o.Languages
	}
	if !IsNil(o.Countries) {
		toSerialize["countries"] = o.Countries
	}
	if !IsNil(o.Regions) {
		toSerialize["regions"] = o.Regions
	}
	if !IsNil(o.Cities) {
		toSerialize["cities"] = o.Cities
	}
	if !IsNil(o.Dmas) {
		toSerialize["dmas"] = o.Dmas
	}
	if !IsNil(o.MobileCarriers) {
		toSerialize["mobile_carriers"] = o.MobileCarriers
	}
	if !IsNil(o.ConnectionTypes) {
		toSerialize["connection_types"] = o.ConnectionTypes
	}
	if !IsNil(o.Ips) {
		toSerialize["ips"] = o.Ips
	}
	if !IsNil(o.IsBlockProxy) {
		toSerialize["is_block_proxy"] = o.IsBlockProxy
	}
	if !IsNil(o.IsUseDayParting) {
		toSerialize["is_use_day_parting"] = o.IsUseDayParting
	}
	if !IsNil(o.DayPartingApplyTo) {
		toSerialize["day_parting_apply_to"] = o.DayPartingApplyTo
	}
	if !IsNil(o.DayPartingTimezoneId) {
		toSerialize["day_parting_timezone_id"] = o.DayPartingTimezoneId
	}
	if !IsNil(o.DaysParting) {
		toSerialize["days_parting"] = o.DaysParting
	}
	if !IsNil(o.Isps) {
		toSerialize["isps"] = o.Isps
	}
	if !IsNil(o.Brands) {
		toSerialize["brands"] = o.Brands
	}
	if !IsNil(o.PostalCodes) {
		toSerialize["postal_codes"] = o.PostalCodes
	}
	return toSerialize, nil
}

type NullableRuleset struct {
	value *Ruleset
	isSet bool
}

func (v NullableRuleset) Get() *Ruleset {
	return v.value
}

func (v *NullableRuleset) Set(val *Ruleset) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleset) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleset(val *Ruleset) *NullableRuleset {
	return &NullableRuleset{value: val, isSet: true}
}

func (v NullableRuleset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


