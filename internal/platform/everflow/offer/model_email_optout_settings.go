/*
Everflow Network API - Offers

API for managing offers in the Everflow platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package offer

import (
	"encoding/json"
)

// checks if the EmailOptoutSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailOptoutSettings{}

// EmailOptoutSettings struct for EmailOptoutSettings
type EmailOptoutSettings struct {
	// Email optout enabled
	IsEnabled *bool `json:"is_enabled,omitempty"`
	// Suppression file URL
	SuppressionFileLink *string `json:"suppression_file_link,omitempty"`
	// Unsubscribe URL
	UnsubLink *string `json:"unsub_link,omitempty"`
}

// NewEmailOptoutSettings instantiates a new EmailOptoutSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailOptoutSettings() *EmailOptoutSettings {
	this := EmailOptoutSettings{}
	return &this
}

// NewEmailOptoutSettingsWithDefaults instantiates a new EmailOptoutSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailOptoutSettingsWithDefaults() *EmailOptoutSettings {
	this := EmailOptoutSettings{}
	return &this
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *EmailOptoutSettings) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailOptoutSettings) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *EmailOptoutSettings) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *EmailOptoutSettings) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetSuppressionFileLink returns the SuppressionFileLink field value if set, zero value otherwise.
func (o *EmailOptoutSettings) GetSuppressionFileLink() string {
	if o == nil || IsNil(o.SuppressionFileLink) {
		var ret string
		return ret
	}
	return *o.SuppressionFileLink
}

// GetSuppressionFileLinkOk returns a tuple with the SuppressionFileLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailOptoutSettings) GetSuppressionFileLinkOk() (*string, bool) {
	if o == nil || IsNil(o.SuppressionFileLink) {
		return nil, false
	}
	return o.SuppressionFileLink, true
}

// HasSuppressionFileLink returns a boolean if a field has been set.
func (o *EmailOptoutSettings) HasSuppressionFileLink() bool {
	if o != nil && !IsNil(o.SuppressionFileLink) {
		return true
	}

	return false
}

// SetSuppressionFileLink gets a reference to the given string and assigns it to the SuppressionFileLink field.
func (o *EmailOptoutSettings) SetSuppressionFileLink(v string) {
	o.SuppressionFileLink = &v
}

// GetUnsubLink returns the UnsubLink field value if set, zero value otherwise.
func (o *EmailOptoutSettings) GetUnsubLink() string {
	if o == nil || IsNil(o.UnsubLink) {
		var ret string
		return ret
	}
	return *o.UnsubLink
}

// GetUnsubLinkOk returns a tuple with the UnsubLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailOptoutSettings) GetUnsubLinkOk() (*string, bool) {
	if o == nil || IsNil(o.UnsubLink) {
		return nil, false
	}
	return o.UnsubLink, true
}

// HasUnsubLink returns a boolean if a field has been set.
func (o *EmailOptoutSettings) HasUnsubLink() bool {
	if o != nil && !IsNil(o.UnsubLink) {
		return true
	}

	return false
}

// SetUnsubLink gets a reference to the given string and assigns it to the UnsubLink field.
func (o *EmailOptoutSettings) SetUnsubLink(v string) {
	o.UnsubLink = &v
}

func (o EmailOptoutSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailOptoutSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsEnabled) {
		toSerialize["is_enabled"] = o.IsEnabled
	}
	if !IsNil(o.SuppressionFileLink) {
		toSerialize["suppression_file_link"] = o.SuppressionFileLink
	}
	if !IsNil(o.UnsubLink) {
		toSerialize["unsub_link"] = o.UnsubLink
	}
	return toSerialize, nil
}

type NullableEmailOptoutSettings struct {
	value *EmailOptoutSettings
	isSet bool
}

func (v NullableEmailOptoutSettings) Get() *EmailOptoutSettings {
	return v.value
}

func (v *NullableEmailOptoutSettings) Set(val *EmailOptoutSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailOptoutSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailOptoutSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailOptoutSettings(val *EmailOptoutSettings) *NullableEmailOptoutSettings {
	return &NullableEmailOptoutSettings{value: val, isSet: true}
}

func (v NullableEmailOptoutSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailOptoutSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


