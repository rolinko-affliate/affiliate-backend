/*
Everflow Network API - Offers

API for managing offers in the Everflow platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package offer

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TrafficFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrafficFilter{}

// TrafficFilter struct for TrafficFilter
type TrafficFilter struct {
	// Parameter to filter
	Parameter string `json:"parameter"`
	// Matching type
	MatchType string `json:"match_type"`
	// Value to match
	Value string `json:"value"`
	// Action to take
	Action string `json:"action"`
}

type _TrafficFilter TrafficFilter

// NewTrafficFilter instantiates a new TrafficFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrafficFilter(parameter string, matchType string, value string, action string) *TrafficFilter {
	this := TrafficFilter{}
	this.Parameter = parameter
	this.MatchType = matchType
	this.Value = value
	this.Action = action
	return &this
}

// NewTrafficFilterWithDefaults instantiates a new TrafficFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrafficFilterWithDefaults() *TrafficFilter {
	this := TrafficFilter{}
	return &this
}

// GetParameter returns the Parameter field value
func (o *TrafficFilter) GetParameter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Parameter
}

// GetParameterOk returns a tuple with the Parameter field value
// and a boolean to check if the value has been set.
func (o *TrafficFilter) GetParameterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Parameter, true
}

// SetParameter sets field value
func (o *TrafficFilter) SetParameter(v string) {
	o.Parameter = v
}

// GetMatchType returns the MatchType field value
func (o *TrafficFilter) GetMatchType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MatchType
}

// GetMatchTypeOk returns a tuple with the MatchType field value
// and a boolean to check if the value has been set.
func (o *TrafficFilter) GetMatchTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchType, true
}

// SetMatchType sets field value
func (o *TrafficFilter) SetMatchType(v string) {
	o.MatchType = v
}

// GetValue returns the Value field value
func (o *TrafficFilter) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *TrafficFilter) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *TrafficFilter) SetValue(v string) {
	o.Value = v
}

// GetAction returns the Action field value
func (o *TrafficFilter) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *TrafficFilter) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *TrafficFilter) SetAction(v string) {
	o.Action = v
}

func (o TrafficFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrafficFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["parameter"] = o.Parameter
	toSerialize["match_type"] = o.MatchType
	toSerialize["value"] = o.Value
	toSerialize["action"] = o.Action
	return toSerialize, nil
}

func (o *TrafficFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"parameter",
		"match_type",
		"value",
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrafficFilter := _TrafficFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrafficFilter)

	if err != nil {
		return err
	}

	*o = TrafficFilter(varTrafficFilter)

	return err
}

type NullableTrafficFilter struct {
	value *TrafficFilter
	isSet bool
}

func (v NullableTrafficFilter) Get() *TrafficFilter {
	return v.value
}

func (v *NullableTrafficFilter) Set(val *TrafficFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableTrafficFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableTrafficFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrafficFilter(val *TrafficFilter) *NullableTrafficFilter {
	return &NullableTrafficFilter{value: val, isSet: true}
}

func (v NullableTrafficFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrafficFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
