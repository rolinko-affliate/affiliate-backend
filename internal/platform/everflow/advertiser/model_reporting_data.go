/*
Everflow Network API - Advertisers

API for managing advertisers in the Everflow platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package advertiser

import (
	"encoding/json"
)

// checks if the ReportingData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportingData{}

// ReportingData struct for ReportingData
type ReportingData struct {
	// Impressions
	Imp *int32 `json:"imp,omitempty"`
	// Total clicks
	TotalClick *int32 `json:"total_click,omitempty"`
	// Unique clicks
	UniqueClick *int32 `json:"unique_click,omitempty"`
	// Invalid clicks
	InvalidClick *int32 `json:"invalid_click,omitempty"`
	// Duplicate clicks
	DuplicateClick *int32 `json:"duplicate_click,omitempty"`
	// Gross clicks
	GrossClick *int32 `json:"gross_click,omitempty"`
	// Click-through rate
	Ctr *float32 `json:"ctr,omitempty"`
	// Conversions
	Cv *int32 `json:"cv,omitempty"`
	// Invalid conversions scrubbed
	InvalidCvScrub *int32 `json:"invalid_cv_scrub,omitempty"`
	// View-through conversions
	ViewThroughCv *int32 `json:"view_through_cv,omitempty"`
	// Total conversions
	TotalCv *int32 `json:"total_cv,omitempty"`
	// Events
	Event *int32 `json:"event,omitempty"`
	// Conversion rate
	Cvr *float32 `json:"cvr,omitempty"`
	// Event rate
	Evr *float32 `json:"evr,omitempty"`
	// Cost per click
	Cpc *float32 `json:"cpc,omitempty"`
	// Cost per mille
	Cpm *float32 `json:"cpm,omitempty"`
	// Cost per acquisition
	Cpa *float32 `json:"cpa,omitempty"`
	// Earnings per click
	Epc *float32 `json:"epc,omitempty"`
	// Revenue per click
	Rpc *float32 `json:"rpc,omitempty"`
	// Revenue per acquisition
	Rpa *float32 `json:"rpa,omitempty"`
	// Revenue per mille
	Rpm *float32 `json:"rpm,omitempty"`
	// Payout amount
	Payout *float32 `json:"payout,omitempty"`
	// Revenue amount
	Revenue *float32 `json:"revenue,omitempty"`
	// Event revenue
	EventRevenue *float32 `json:"event_revenue,omitempty"`
	// Gross sales
	GrossSales *float32 `json:"gross_sales,omitempty"`
	// Profit
	Profit *float32 `json:"profit,omitempty"`
	// Margin
	Margin *float32 `json:"margin,omitempty"`
	// Return on ad spend
	Roas *float32 `json:"roas,omitempty"`
	// Average sale value
	AvgSaleValue *float32 `json:"avg_sale_value,omitempty"`
	// Media buying cost
	MediaBuyingCost *float32 `json:"media_buying_cost,omitempty"`
}

// NewReportingData instantiates a new ReportingData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportingData() *ReportingData {
	this := ReportingData{}
	return &this
}

// NewReportingDataWithDefaults instantiates a new ReportingData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportingDataWithDefaults() *ReportingData {
	this := ReportingData{}
	return &this
}

// GetImp returns the Imp field value if set, zero value otherwise.
func (o *ReportingData) GetImp() int32 {
	if o == nil || IsNil(o.Imp) {
		var ret int32
		return ret
	}
	return *o.Imp
}

// GetImpOk returns a tuple with the Imp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetImpOk() (*int32, bool) {
	if o == nil || IsNil(o.Imp) {
		return nil, false
	}
	return o.Imp, true
}

// HasImp returns a boolean if a field has been set.
func (o *ReportingData) HasImp() bool {
	if o != nil && !IsNil(o.Imp) {
		return true
	}

	return false
}

// SetImp gets a reference to the given int32 and assigns it to the Imp field.
func (o *ReportingData) SetImp(v int32) {
	o.Imp = &v
}

// GetTotalClick returns the TotalClick field value if set, zero value otherwise.
func (o *ReportingData) GetTotalClick() int32 {
	if o == nil || IsNil(o.TotalClick) {
		var ret int32
		return ret
	}
	return *o.TotalClick
}

// GetTotalClickOk returns a tuple with the TotalClick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetTotalClickOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalClick) {
		return nil, false
	}
	return o.TotalClick, true
}

// HasTotalClick returns a boolean if a field has been set.
func (o *ReportingData) HasTotalClick() bool {
	if o != nil && !IsNil(o.TotalClick) {
		return true
	}

	return false
}

// SetTotalClick gets a reference to the given int32 and assigns it to the TotalClick field.
func (o *ReportingData) SetTotalClick(v int32) {
	o.TotalClick = &v
}

// GetUniqueClick returns the UniqueClick field value if set, zero value otherwise.
func (o *ReportingData) GetUniqueClick() int32 {
	if o == nil || IsNil(o.UniqueClick) {
		var ret int32
		return ret
	}
	return *o.UniqueClick
}

// GetUniqueClickOk returns a tuple with the UniqueClick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetUniqueClickOk() (*int32, bool) {
	if o == nil || IsNil(o.UniqueClick) {
		return nil, false
	}
	return o.UniqueClick, true
}

// HasUniqueClick returns a boolean if a field has been set.
func (o *ReportingData) HasUniqueClick() bool {
	if o != nil && !IsNil(o.UniqueClick) {
		return true
	}

	return false
}

// SetUniqueClick gets a reference to the given int32 and assigns it to the UniqueClick field.
func (o *ReportingData) SetUniqueClick(v int32) {
	o.UniqueClick = &v
}

// GetInvalidClick returns the InvalidClick field value if set, zero value otherwise.
func (o *ReportingData) GetInvalidClick() int32 {
	if o == nil || IsNil(o.InvalidClick) {
		var ret int32
		return ret
	}
	return *o.InvalidClick
}

// GetInvalidClickOk returns a tuple with the InvalidClick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetInvalidClickOk() (*int32, bool) {
	if o == nil || IsNil(o.InvalidClick) {
		return nil, false
	}
	return o.InvalidClick, true
}

// HasInvalidClick returns a boolean if a field has been set.
func (o *ReportingData) HasInvalidClick() bool {
	if o != nil && !IsNil(o.InvalidClick) {
		return true
	}

	return false
}

// SetInvalidClick gets a reference to the given int32 and assigns it to the InvalidClick field.
func (o *ReportingData) SetInvalidClick(v int32) {
	o.InvalidClick = &v
}

// GetDuplicateClick returns the DuplicateClick field value if set, zero value otherwise.
func (o *ReportingData) GetDuplicateClick() int32 {
	if o == nil || IsNil(o.DuplicateClick) {
		var ret int32
		return ret
	}
	return *o.DuplicateClick
}

// GetDuplicateClickOk returns a tuple with the DuplicateClick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetDuplicateClickOk() (*int32, bool) {
	if o == nil || IsNil(o.DuplicateClick) {
		return nil, false
	}
	return o.DuplicateClick, true
}

// HasDuplicateClick returns a boolean if a field has been set.
func (o *ReportingData) HasDuplicateClick() bool {
	if o != nil && !IsNil(o.DuplicateClick) {
		return true
	}

	return false
}

// SetDuplicateClick gets a reference to the given int32 and assigns it to the DuplicateClick field.
func (o *ReportingData) SetDuplicateClick(v int32) {
	o.DuplicateClick = &v
}

// GetGrossClick returns the GrossClick field value if set, zero value otherwise.
func (o *ReportingData) GetGrossClick() int32 {
	if o == nil || IsNil(o.GrossClick) {
		var ret int32
		return ret
	}
	return *o.GrossClick
}

// GetGrossClickOk returns a tuple with the GrossClick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetGrossClickOk() (*int32, bool) {
	if o == nil || IsNil(o.GrossClick) {
		return nil, false
	}
	return o.GrossClick, true
}

// HasGrossClick returns a boolean if a field has been set.
func (o *ReportingData) HasGrossClick() bool {
	if o != nil && !IsNil(o.GrossClick) {
		return true
	}

	return false
}

// SetGrossClick gets a reference to the given int32 and assigns it to the GrossClick field.
func (o *ReportingData) SetGrossClick(v int32) {
	o.GrossClick = &v
}

// GetCtr returns the Ctr field value if set, zero value otherwise.
func (o *ReportingData) GetCtr() float32 {
	if o == nil || IsNil(o.Ctr) {
		var ret float32
		return ret
	}
	return *o.Ctr
}

// GetCtrOk returns a tuple with the Ctr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetCtrOk() (*float32, bool) {
	if o == nil || IsNil(o.Ctr) {
		return nil, false
	}
	return o.Ctr, true
}

// HasCtr returns a boolean if a field has been set.
func (o *ReportingData) HasCtr() bool {
	if o != nil && !IsNil(o.Ctr) {
		return true
	}

	return false
}

// SetCtr gets a reference to the given float32 and assigns it to the Ctr field.
func (o *ReportingData) SetCtr(v float32) {
	o.Ctr = &v
}

// GetCv returns the Cv field value if set, zero value otherwise.
func (o *ReportingData) GetCv() int32 {
	if o == nil || IsNil(o.Cv) {
		var ret int32
		return ret
	}
	return *o.Cv
}

// GetCvOk returns a tuple with the Cv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetCvOk() (*int32, bool) {
	if o == nil || IsNil(o.Cv) {
		return nil, false
	}
	return o.Cv, true
}

// HasCv returns a boolean if a field has been set.
func (o *ReportingData) HasCv() bool {
	if o != nil && !IsNil(o.Cv) {
		return true
	}

	return false
}

// SetCv gets a reference to the given int32 and assigns it to the Cv field.
func (o *ReportingData) SetCv(v int32) {
	o.Cv = &v
}

// GetInvalidCvScrub returns the InvalidCvScrub field value if set, zero value otherwise.
func (o *ReportingData) GetInvalidCvScrub() int32 {
	if o == nil || IsNil(o.InvalidCvScrub) {
		var ret int32
		return ret
	}
	return *o.InvalidCvScrub
}

// GetInvalidCvScrubOk returns a tuple with the InvalidCvScrub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetInvalidCvScrubOk() (*int32, bool) {
	if o == nil || IsNil(o.InvalidCvScrub) {
		return nil, false
	}
	return o.InvalidCvScrub, true
}

// HasInvalidCvScrub returns a boolean if a field has been set.
func (o *ReportingData) HasInvalidCvScrub() bool {
	if o != nil && !IsNil(o.InvalidCvScrub) {
		return true
	}

	return false
}

// SetInvalidCvScrub gets a reference to the given int32 and assigns it to the InvalidCvScrub field.
func (o *ReportingData) SetInvalidCvScrub(v int32) {
	o.InvalidCvScrub = &v
}

// GetViewThroughCv returns the ViewThroughCv field value if set, zero value otherwise.
func (o *ReportingData) GetViewThroughCv() int32 {
	if o == nil || IsNil(o.ViewThroughCv) {
		var ret int32
		return ret
	}
	return *o.ViewThroughCv
}

// GetViewThroughCvOk returns a tuple with the ViewThroughCv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetViewThroughCvOk() (*int32, bool) {
	if o == nil || IsNil(o.ViewThroughCv) {
		return nil, false
	}
	return o.ViewThroughCv, true
}

// HasViewThroughCv returns a boolean if a field has been set.
func (o *ReportingData) HasViewThroughCv() bool {
	if o != nil && !IsNil(o.ViewThroughCv) {
		return true
	}

	return false
}

// SetViewThroughCv gets a reference to the given int32 and assigns it to the ViewThroughCv field.
func (o *ReportingData) SetViewThroughCv(v int32) {
	o.ViewThroughCv = &v
}

// GetTotalCv returns the TotalCv field value if set, zero value otherwise.
func (o *ReportingData) GetTotalCv() int32 {
	if o == nil || IsNil(o.TotalCv) {
		var ret int32
		return ret
	}
	return *o.TotalCv
}

// GetTotalCvOk returns a tuple with the TotalCv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetTotalCvOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalCv) {
		return nil, false
	}
	return o.TotalCv, true
}

// HasTotalCv returns a boolean if a field has been set.
func (o *ReportingData) HasTotalCv() bool {
	if o != nil && !IsNil(o.TotalCv) {
		return true
	}

	return false
}

// SetTotalCv gets a reference to the given int32 and assigns it to the TotalCv field.
func (o *ReportingData) SetTotalCv(v int32) {
	o.TotalCv = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *ReportingData) GetEvent() int32 {
	if o == nil || IsNil(o.Event) {
		var ret int32
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetEventOk() (*int32, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *ReportingData) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given int32 and assigns it to the Event field.
func (o *ReportingData) SetEvent(v int32) {
	o.Event = &v
}

// GetCvr returns the Cvr field value if set, zero value otherwise.
func (o *ReportingData) GetCvr() float32 {
	if o == nil || IsNil(o.Cvr) {
		var ret float32
		return ret
	}
	return *o.Cvr
}

// GetCvrOk returns a tuple with the Cvr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetCvrOk() (*float32, bool) {
	if o == nil || IsNil(o.Cvr) {
		return nil, false
	}
	return o.Cvr, true
}

// HasCvr returns a boolean if a field has been set.
func (o *ReportingData) HasCvr() bool {
	if o != nil && !IsNil(o.Cvr) {
		return true
	}

	return false
}

// SetCvr gets a reference to the given float32 and assigns it to the Cvr field.
func (o *ReportingData) SetCvr(v float32) {
	o.Cvr = &v
}

// GetEvr returns the Evr field value if set, zero value otherwise.
func (o *ReportingData) GetEvr() float32 {
	if o == nil || IsNil(o.Evr) {
		var ret float32
		return ret
	}
	return *o.Evr
}

// GetEvrOk returns a tuple with the Evr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetEvrOk() (*float32, bool) {
	if o == nil || IsNil(o.Evr) {
		return nil, false
	}
	return o.Evr, true
}

// HasEvr returns a boolean if a field has been set.
func (o *ReportingData) HasEvr() bool {
	if o != nil && !IsNil(o.Evr) {
		return true
	}

	return false
}

// SetEvr gets a reference to the given float32 and assigns it to the Evr field.
func (o *ReportingData) SetEvr(v float32) {
	o.Evr = &v
}

// GetCpc returns the Cpc field value if set, zero value otherwise.
func (o *ReportingData) GetCpc() float32 {
	if o == nil || IsNil(o.Cpc) {
		var ret float32
		return ret
	}
	return *o.Cpc
}

// GetCpcOk returns a tuple with the Cpc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetCpcOk() (*float32, bool) {
	if o == nil || IsNil(o.Cpc) {
		return nil, false
	}
	return o.Cpc, true
}

// HasCpc returns a boolean if a field has been set.
func (o *ReportingData) HasCpc() bool {
	if o != nil && !IsNil(o.Cpc) {
		return true
	}

	return false
}

// SetCpc gets a reference to the given float32 and assigns it to the Cpc field.
func (o *ReportingData) SetCpc(v float32) {
	o.Cpc = &v
}

// GetCpm returns the Cpm field value if set, zero value otherwise.
func (o *ReportingData) GetCpm() float32 {
	if o == nil || IsNil(o.Cpm) {
		var ret float32
		return ret
	}
	return *o.Cpm
}

// GetCpmOk returns a tuple with the Cpm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetCpmOk() (*float32, bool) {
	if o == nil || IsNil(o.Cpm) {
		return nil, false
	}
	return o.Cpm, true
}

// HasCpm returns a boolean if a field has been set.
func (o *ReportingData) HasCpm() bool {
	if o != nil && !IsNil(o.Cpm) {
		return true
	}

	return false
}

// SetCpm gets a reference to the given float32 and assigns it to the Cpm field.
func (o *ReportingData) SetCpm(v float32) {
	o.Cpm = &v
}

// GetCpa returns the Cpa field value if set, zero value otherwise.
func (o *ReportingData) GetCpa() float32 {
	if o == nil || IsNil(o.Cpa) {
		var ret float32
		return ret
	}
	return *o.Cpa
}

// GetCpaOk returns a tuple with the Cpa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetCpaOk() (*float32, bool) {
	if o == nil || IsNil(o.Cpa) {
		return nil, false
	}
	return o.Cpa, true
}

// HasCpa returns a boolean if a field has been set.
func (o *ReportingData) HasCpa() bool {
	if o != nil && !IsNil(o.Cpa) {
		return true
	}

	return false
}

// SetCpa gets a reference to the given float32 and assigns it to the Cpa field.
func (o *ReportingData) SetCpa(v float32) {
	o.Cpa = &v
}

// GetEpc returns the Epc field value if set, zero value otherwise.
func (o *ReportingData) GetEpc() float32 {
	if o == nil || IsNil(o.Epc) {
		var ret float32
		return ret
	}
	return *o.Epc
}

// GetEpcOk returns a tuple with the Epc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetEpcOk() (*float32, bool) {
	if o == nil || IsNil(o.Epc) {
		return nil, false
	}
	return o.Epc, true
}

// HasEpc returns a boolean if a field has been set.
func (o *ReportingData) HasEpc() bool {
	if o != nil && !IsNil(o.Epc) {
		return true
	}

	return false
}

// SetEpc gets a reference to the given float32 and assigns it to the Epc field.
func (o *ReportingData) SetEpc(v float32) {
	o.Epc = &v
}

// GetRpc returns the Rpc field value if set, zero value otherwise.
func (o *ReportingData) GetRpc() float32 {
	if o == nil || IsNil(o.Rpc) {
		var ret float32
		return ret
	}
	return *o.Rpc
}

// GetRpcOk returns a tuple with the Rpc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetRpcOk() (*float32, bool) {
	if o == nil || IsNil(o.Rpc) {
		return nil, false
	}
	return o.Rpc, true
}

// HasRpc returns a boolean if a field has been set.
func (o *ReportingData) HasRpc() bool {
	if o != nil && !IsNil(o.Rpc) {
		return true
	}

	return false
}

// SetRpc gets a reference to the given float32 and assigns it to the Rpc field.
func (o *ReportingData) SetRpc(v float32) {
	o.Rpc = &v
}

// GetRpa returns the Rpa field value if set, zero value otherwise.
func (o *ReportingData) GetRpa() float32 {
	if o == nil || IsNil(o.Rpa) {
		var ret float32
		return ret
	}
	return *o.Rpa
}

// GetRpaOk returns a tuple with the Rpa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetRpaOk() (*float32, bool) {
	if o == nil || IsNil(o.Rpa) {
		return nil, false
	}
	return o.Rpa, true
}

// HasRpa returns a boolean if a field has been set.
func (o *ReportingData) HasRpa() bool {
	if o != nil && !IsNil(o.Rpa) {
		return true
	}

	return false
}

// SetRpa gets a reference to the given float32 and assigns it to the Rpa field.
func (o *ReportingData) SetRpa(v float32) {
	o.Rpa = &v
}

// GetRpm returns the Rpm field value if set, zero value otherwise.
func (o *ReportingData) GetRpm() float32 {
	if o == nil || IsNil(o.Rpm) {
		var ret float32
		return ret
	}
	return *o.Rpm
}

// GetRpmOk returns a tuple with the Rpm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetRpmOk() (*float32, bool) {
	if o == nil || IsNil(o.Rpm) {
		return nil, false
	}
	return o.Rpm, true
}

// HasRpm returns a boolean if a field has been set.
func (o *ReportingData) HasRpm() bool {
	if o != nil && !IsNil(o.Rpm) {
		return true
	}

	return false
}

// SetRpm gets a reference to the given float32 and assigns it to the Rpm field.
func (o *ReportingData) SetRpm(v float32) {
	o.Rpm = &v
}

// GetPayout returns the Payout field value if set, zero value otherwise.
func (o *ReportingData) GetPayout() float32 {
	if o == nil || IsNil(o.Payout) {
		var ret float32
		return ret
	}
	return *o.Payout
}

// GetPayoutOk returns a tuple with the Payout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetPayoutOk() (*float32, bool) {
	if o == nil || IsNil(o.Payout) {
		return nil, false
	}
	return o.Payout, true
}

// HasPayout returns a boolean if a field has been set.
func (o *ReportingData) HasPayout() bool {
	if o != nil && !IsNil(o.Payout) {
		return true
	}

	return false
}

// SetPayout gets a reference to the given float32 and assigns it to the Payout field.
func (o *ReportingData) SetPayout(v float32) {
	o.Payout = &v
}

// GetRevenue returns the Revenue field value if set, zero value otherwise.
func (o *ReportingData) GetRevenue() float32 {
	if o == nil || IsNil(o.Revenue) {
		var ret float32
		return ret
	}
	return *o.Revenue
}

// GetRevenueOk returns a tuple with the Revenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetRevenueOk() (*float32, bool) {
	if o == nil || IsNil(o.Revenue) {
		return nil, false
	}
	return o.Revenue, true
}

// HasRevenue returns a boolean if a field has been set.
func (o *ReportingData) HasRevenue() bool {
	if o != nil && !IsNil(o.Revenue) {
		return true
	}

	return false
}

// SetRevenue gets a reference to the given float32 and assigns it to the Revenue field.
func (o *ReportingData) SetRevenue(v float32) {
	o.Revenue = &v
}

// GetEventRevenue returns the EventRevenue field value if set, zero value otherwise.
func (o *ReportingData) GetEventRevenue() float32 {
	if o == nil || IsNil(o.EventRevenue) {
		var ret float32
		return ret
	}
	return *o.EventRevenue
}

// GetEventRevenueOk returns a tuple with the EventRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetEventRevenueOk() (*float32, bool) {
	if o == nil || IsNil(o.EventRevenue) {
		return nil, false
	}
	return o.EventRevenue, true
}

// HasEventRevenue returns a boolean if a field has been set.
func (o *ReportingData) HasEventRevenue() bool {
	if o != nil && !IsNil(o.EventRevenue) {
		return true
	}

	return false
}

// SetEventRevenue gets a reference to the given float32 and assigns it to the EventRevenue field.
func (o *ReportingData) SetEventRevenue(v float32) {
	o.EventRevenue = &v
}

// GetGrossSales returns the GrossSales field value if set, zero value otherwise.
func (o *ReportingData) GetGrossSales() float32 {
	if o == nil || IsNil(o.GrossSales) {
		var ret float32
		return ret
	}
	return *o.GrossSales
}

// GetGrossSalesOk returns a tuple with the GrossSales field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetGrossSalesOk() (*float32, bool) {
	if o == nil || IsNil(o.GrossSales) {
		return nil, false
	}
	return o.GrossSales, true
}

// HasGrossSales returns a boolean if a field has been set.
func (o *ReportingData) HasGrossSales() bool {
	if o != nil && !IsNil(o.GrossSales) {
		return true
	}

	return false
}

// SetGrossSales gets a reference to the given float32 and assigns it to the GrossSales field.
func (o *ReportingData) SetGrossSales(v float32) {
	o.GrossSales = &v
}

// GetProfit returns the Profit field value if set, zero value otherwise.
func (o *ReportingData) GetProfit() float32 {
	if o == nil || IsNil(o.Profit) {
		var ret float32
		return ret
	}
	return *o.Profit
}

// GetProfitOk returns a tuple with the Profit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetProfitOk() (*float32, bool) {
	if o == nil || IsNil(o.Profit) {
		return nil, false
	}
	return o.Profit, true
}

// HasProfit returns a boolean if a field has been set.
func (o *ReportingData) HasProfit() bool {
	if o != nil && !IsNil(o.Profit) {
		return true
	}

	return false
}

// SetProfit gets a reference to the given float32 and assigns it to the Profit field.
func (o *ReportingData) SetProfit(v float32) {
	o.Profit = &v
}

// GetMargin returns the Margin field value if set, zero value otherwise.
func (o *ReportingData) GetMargin() float32 {
	if o == nil || IsNil(o.Margin) {
		var ret float32
		return ret
	}
	return *o.Margin
}

// GetMarginOk returns a tuple with the Margin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetMarginOk() (*float32, bool) {
	if o == nil || IsNil(o.Margin) {
		return nil, false
	}
	return o.Margin, true
}

// HasMargin returns a boolean if a field has been set.
func (o *ReportingData) HasMargin() bool {
	if o != nil && !IsNil(o.Margin) {
		return true
	}

	return false
}

// SetMargin gets a reference to the given float32 and assigns it to the Margin field.
func (o *ReportingData) SetMargin(v float32) {
	o.Margin = &v
}

// GetRoas returns the Roas field value if set, zero value otherwise.
func (o *ReportingData) GetRoas() float32 {
	if o == nil || IsNil(o.Roas) {
		var ret float32
		return ret
	}
	return *o.Roas
}

// GetRoasOk returns a tuple with the Roas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetRoasOk() (*float32, bool) {
	if o == nil || IsNil(o.Roas) {
		return nil, false
	}
	return o.Roas, true
}

// HasRoas returns a boolean if a field has been set.
func (o *ReportingData) HasRoas() bool {
	if o != nil && !IsNil(o.Roas) {
		return true
	}

	return false
}

// SetRoas gets a reference to the given float32 and assigns it to the Roas field.
func (o *ReportingData) SetRoas(v float32) {
	o.Roas = &v
}

// GetAvgSaleValue returns the AvgSaleValue field value if set, zero value otherwise.
func (o *ReportingData) GetAvgSaleValue() float32 {
	if o == nil || IsNil(o.AvgSaleValue) {
		var ret float32
		return ret
	}
	return *o.AvgSaleValue
}

// GetAvgSaleValueOk returns a tuple with the AvgSaleValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetAvgSaleValueOk() (*float32, bool) {
	if o == nil || IsNil(o.AvgSaleValue) {
		return nil, false
	}
	return o.AvgSaleValue, true
}

// HasAvgSaleValue returns a boolean if a field has been set.
func (o *ReportingData) HasAvgSaleValue() bool {
	if o != nil && !IsNil(o.AvgSaleValue) {
		return true
	}

	return false
}

// SetAvgSaleValue gets a reference to the given float32 and assigns it to the AvgSaleValue field.
func (o *ReportingData) SetAvgSaleValue(v float32) {
	o.AvgSaleValue = &v
}

// GetMediaBuyingCost returns the MediaBuyingCost field value if set, zero value otherwise.
func (o *ReportingData) GetMediaBuyingCost() float32 {
	if o == nil || IsNil(o.MediaBuyingCost) {
		var ret float32
		return ret
	}
	return *o.MediaBuyingCost
}

// GetMediaBuyingCostOk returns a tuple with the MediaBuyingCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingData) GetMediaBuyingCostOk() (*float32, bool) {
	if o == nil || IsNil(o.MediaBuyingCost) {
		return nil, false
	}
	return o.MediaBuyingCost, true
}

// HasMediaBuyingCost returns a boolean if a field has been set.
func (o *ReportingData) HasMediaBuyingCost() bool {
	if o != nil && !IsNil(o.MediaBuyingCost) {
		return true
	}

	return false
}

// SetMediaBuyingCost gets a reference to the given float32 and assigns it to the MediaBuyingCost field.
func (o *ReportingData) SetMediaBuyingCost(v float32) {
	o.MediaBuyingCost = &v
}

func (o ReportingData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportingData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Imp) {
		toSerialize["imp"] = o.Imp
	}
	if !IsNil(o.TotalClick) {
		toSerialize["total_click"] = o.TotalClick
	}
	if !IsNil(o.UniqueClick) {
		toSerialize["unique_click"] = o.UniqueClick
	}
	if !IsNil(o.InvalidClick) {
		toSerialize["invalid_click"] = o.InvalidClick
	}
	if !IsNil(o.DuplicateClick) {
		toSerialize["duplicate_click"] = o.DuplicateClick
	}
	if !IsNil(o.GrossClick) {
		toSerialize["gross_click"] = o.GrossClick
	}
	if !IsNil(o.Ctr) {
		toSerialize["ctr"] = o.Ctr
	}
	if !IsNil(o.Cv) {
		toSerialize["cv"] = o.Cv
	}
	if !IsNil(o.InvalidCvScrub) {
		toSerialize["invalid_cv_scrub"] = o.InvalidCvScrub
	}
	if !IsNil(o.ViewThroughCv) {
		toSerialize["view_through_cv"] = o.ViewThroughCv
	}
	if !IsNil(o.TotalCv) {
		toSerialize["total_cv"] = o.TotalCv
	}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	if !IsNil(o.Cvr) {
		toSerialize["cvr"] = o.Cvr
	}
	if !IsNil(o.Evr) {
		toSerialize["evr"] = o.Evr
	}
	if !IsNil(o.Cpc) {
		toSerialize["cpc"] = o.Cpc
	}
	if !IsNil(o.Cpm) {
		toSerialize["cpm"] = o.Cpm
	}
	if !IsNil(o.Cpa) {
		toSerialize["cpa"] = o.Cpa
	}
	if !IsNil(o.Epc) {
		toSerialize["epc"] = o.Epc
	}
	if !IsNil(o.Rpc) {
		toSerialize["rpc"] = o.Rpc
	}
	if !IsNil(o.Rpa) {
		toSerialize["rpa"] = o.Rpa
	}
	if !IsNil(o.Rpm) {
		toSerialize["rpm"] = o.Rpm
	}
	if !IsNil(o.Payout) {
		toSerialize["payout"] = o.Payout
	}
	if !IsNil(o.Revenue) {
		toSerialize["revenue"] = o.Revenue
	}
	if !IsNil(o.EventRevenue) {
		toSerialize["event_revenue"] = o.EventRevenue
	}
	if !IsNil(o.GrossSales) {
		toSerialize["gross_sales"] = o.GrossSales
	}
	if !IsNil(o.Profit) {
		toSerialize["profit"] = o.Profit
	}
	if !IsNil(o.Margin) {
		toSerialize["margin"] = o.Margin
	}
	if !IsNil(o.Roas) {
		toSerialize["roas"] = o.Roas
	}
	if !IsNil(o.AvgSaleValue) {
		toSerialize["avg_sale_value"] = o.AvgSaleValue
	}
	if !IsNil(o.MediaBuyingCost) {
		toSerialize["media_buying_cost"] = o.MediaBuyingCost
	}
	return toSerialize, nil
}

type NullableReportingData struct {
	value *ReportingData
	isSet bool
}

func (v NullableReportingData) Get() *ReportingData {
	return v.value
}

func (v *NullableReportingData) Set(val *ReportingData) {
	v.value = val
	v.isSet = true
}

func (v NullableReportingData) IsSet() bool {
	return v.isSet
}

func (v *NullableReportingData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportingData(val *ReportingData) *NullableReportingData {
	return &NullableReportingData{value: val, isSet: true}
}

func (v NullableReportingData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportingData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


